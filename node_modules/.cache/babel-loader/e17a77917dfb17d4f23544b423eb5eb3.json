{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/dylankriegman/Desktop/Go-Web-App-V2/go-game-frontend/src/App.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React from 'react';\n\nfunction Tile(props) {\n  _s();\n\n  const {\n    width,\n    height\n  } = useWindowSize();\n  const minDim = width < height ? width : height;\n  const tileSize = (0.9 * minDim / 9).toString();\n  const radius = props.stoneRadius > 0 ? tileSize / 2 - 3 : 0;\n  const prevRadius = radius == 0 ? tileSize / 2 - 3 : 0;\n  return (\n    /*#__PURE__*/\n    //define a on mouse enter event and an on mouse leave event\n    //on mouse enter call a function that modified a value so that \n    //the value holds an svg of the players stone\n    //on mouse exit call a function that modified the value so that it\n    //holds nothing\n    _jsxDEV(\"button\", {\n      className: \"tile\",\n      onClick: props.onClick,\n      onMouseEnter: props.onMouseEnter,\n      onMouseLeave: props.mouseExit,\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        width: tileSize,\n        height: tileSize,\n        children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n          r: radius,\n          cx: tileSize / 2,\n          cy: tileSize / 2,\n          stroke: \"black\",\n          strokeWidth: \"1\",\n          fill: props.stoneFill\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"circle\", {\n          className: \"black-circ\",\n          r: prevRadius,\n          cx: tileSize / 2,\n          cy: tileSize / 2,\n          stroke: \"black\",\n          strokeWidth: \"1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 11\n        }, this), \"circle className=\\\"red-circ\\\" r=\", prevRadius, \" cx=\", tileSize / 2, \" cy=\", tileSize / 2, \" stroke=\\\"black\\\" strokeWidth=\\\"1\\\" />\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this)\n  );\n} //store in utils/useWindowSize\n//import useWindowSize from \"../utils/useWindowSize\"\n\n\n_s(Tile, \"C9tvAgjyjOrlWBm7mvz9MdD8OaI=\", false, function () {\n  return [useWindowSize];\n});\n\n_c = Tile;\n\nfunction useWindowSize() {\n  _s2();\n\n  const isUndefined = typeof window == \"undefined\";\n  const [windowSize, setWindowSize] = React.useState({\n    width: isUndefined ? 1200 : window.innerWidth,\n    height: isUndefined ? 800 : window.innerHeight\n  });\n\n  function changeWindowSize() {\n    setWindowSize({\n      width: window.innerWidth,\n      height: window.innerHeight\n    });\n  }\n\n  React.useEffect(() => {\n    window.addEventListener(\"resize\", () => {\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight\n      });\n    });\n    return () => {\n      window.removeEventListener(\"resize\", () => {\n        setWindowSize({\n          width: window.innerWidth,\n          height: window.innerHeight\n        });\n      });\n    };\n  }, []);\n  return windowSize;\n}\n\n_s2(useWindowSize, \"4aRaqnxRmyEz+RcuYp3N1pU+dHk=\");\n\nclass Board extends React.Component {\n  renderTile(row, col) {\n    return /*#__PURE__*/_jsxDEV(Tile, {\n      onClick: () => this.props.onClick(row, col),\n      stoneRadius: this.props.board[row][col] !== 'n' ? 14 : 0,\n      stoneFill: this.props.board[row][col] === 'b' ? 'black' : 'white'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this);\n  }\n\n  render() {\n    const board = [];\n\n    for (let row = 0; row < this.props.boardSize; row++) {\n      const boardRow = [];\n\n      for (let col = 0; col < this.props.boardSize; col++) {\n        boardRow.push(this.renderTile(row, col));\n      }\n\n      board.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-row\",\n        children: boardRow\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 18\n      }, this));\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: board\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this);\n  }\n\n} //Handles Game Logic\n\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.boardSize = 9;\n    let Board = new Array(this.boardSize);\n\n    for (let row = 0; row < this.boardSize; row++) {\n      Board[row] = new Array(this.boardSize);\n    }\n\n    for (let row = 0; row < this.boardSize; row++) {\n      for (let col = 0; col < this.boardSize; col++) {\n        Board[row][col] = 'n';\n      }\n    }\n\n    this.state = {\n      player1Captures: 0,\n      player2Captures: 0,\n      currentPlayer: 'b',\n      board: Board,\n      boardSize: this.boardSize,\n      playerTurnStatus: \"Black's Turn!\",\n      errorMessage: \"\",\n      player1Name: 'Player 1',\n      player2Name: 'Player 2',\n      player1Color: 'b',\n      player2Color: 'w'\n    };\n  }\n\n  isValidPos(row, col) {\n    if (row >= 0 && row < this.boardSize) {\n      if (col >= 0 && col < this.boardSize) {\n        return true;\n      }\n    }\n\n    return false;\n  } //returns the number of liberties that a stone or group of connected stones has\n  //expects the row and col of the stone or a row col in the group as input\n\n\n  captureHelper(board, row, col, checkedNeighbors) {\n    console.log(typeof checkedNeighbors);\n    const playerColor = board[row][col];\n    const directions = [[-1, 0], [1, 0], [0, 1], [0, -1]];\n    let numOfLiberties = 0;\n    let neighbors = [];\n    const strRowCol = row.toString() + \".\" + col.toString();\n\n    for (let i = 0; i < directions.length; i++) {\n      const direction = directions[i];\n      const adjRow = row + direction[0];\n      const adjCol = col + direction[1];\n\n      if (this.isValidPos(adjRow, adjCol)) {\n        const adjValue = board[adjRow][adjCol];\n        const strAdjPos = adjRow.toString() + \".\" + adjCol.toString();\n\n        if (adjValue === 'n') {\n          numOfLiberties += 1;\n        } else if (adjValue === playerColor && !checkedNeighbors.has(strAdjPos)) {\n          neighbors.push(strAdjPos);\n        }\n      }\n    }\n\n    if (numOfLiberties === 0 && neighbors.length !== 0) {\n      checkedNeighbors.add(strRowCol);\n\n      for (let i = 0; i < neighbors.length; i++) {\n        const neighbor = neighbors[i];\n        const parsedNeighborPos = neighbor.split(\".\");\n        const neighborRow = parseInt(parsedNeighborPos[0]);\n        const neighborCol = parseInt(parsedNeighborPos[1]);\n        numOfLiberties += this.captureHelper(board, neighborRow, neighborCol, checkedNeighbors);\n      }\n\n      return numOfLiberties;\n    } else if (numOfLiberties === 0 && neighbors.length === 0) {\n      return 0;\n    } else {\n      return numOfLiberties;\n    }\n  } //Iterates through the board and checks if any of the opponents stones\n  //have been captured\n  //Returns a list of coordinates of captured stones\n\n\n  getCapturedOpponents(board) {\n    let capturedOpponents = [];\n    const opponentColor = this.state.currentPlayer === 'b' ? 'w' : 'b';\n\n    for (let i = 0; i < this.state.boardSize; i++) {\n      for (let j = 0; j < this.state.boardSize; j++) {\n        const isEmpty = board[i][j] === 'n';\n\n        if (!isEmpty && board[i][j] === opponentColor) {\n          const numberOfLiberties = this.captureHelper(board, i, j, new Set());\n\n          if (numberOfLiberties === 0) {\n            capturedOpponents.push([i, j]);\n          }\n        }\n      }\n    }\n\n    return capturedOpponents;\n  } //run move procedure\n  //returns error and new board\n\n\n  runMoveProcedure(board, i, j) {\n    let errorMessage = \"\";\n    let numCaptures = 0; //if the tile is occupied\n\n    if (board[i][j] !== 'n') {\n      errorMessage = 'Invalid Move!';\n      return [board, numCaptures, errorMessage];\n    } //places the current players stone at (i,j)\n\n\n    board[i][j] = this.state.currentPlayer; //checks if any stones were captured\n\n    const capturedOpponents = this.getCapturedOpponents(board); //if no stones were captured check the following 2 cases\n\n    if (capturedOpponents.length === 0) {\n      //Finding out how many liberties the group at (i,j) has\n      const numLiberties = this.captureHelper(board, i, j, new Set()); //Case 1 (the stone or group placed has no liberties)\n\n      if (numLiberties === 0) {\n        //Remove the current player's stone from (i,j)\n        //And display invalid move message\n        //should return error message of some kind\n        board[i][j] = 'n';\n        errorMessage = \"Invalid Move!\";\n        numCaptures = 0;\n        return [board, numCaptures, errorMessage];\n      } //Case 2 (the stone or group placed has liberties)\n      else {\n          numCaptures = 0;\n          return [board, numCaptures, errorMessage];\n        }\n    } //If stones were captured\n    else {\n        numCaptures = capturedOpponents.length; //Remove the captured stones from the board\n\n        for (let k = 0; k < capturedOpponents.length; k++) {\n          const capturedPos = capturedOpponents[k];\n          const capturedRow = capturedPos[0];\n          const capturedCol = capturedPos[1];\n          board[capturedRow][capturedCol] = \"n\";\n        }\n\n        return [board, numCaptures, errorMessage];\n      }\n  }\n\n  makeMove(i, j) {\n    const moveOutput = this.runMoveProcedure(this.state.board.slice(), i, j);\n    const newBoard = moveOutput[0];\n    const numStonesCaptured = moveOutput[1];\n    const newErrorMessage = moveOutput[2];\n    let newPlayer1Captures = this.state.player1Captures;\n    let newPlayer2Captures = this.state.player2Captures;\n    let newPlayerTurnStatus = this.state.playerTurnStatus;\n    let nextPlayer = this.state.currentPlayer; //The move was successful\n\n    if (newErrorMessage === '') {\n      nextPlayer = this.state.currentPlayer === 'b' ? 'w' : 'b';\n      newPlayerTurnStatus = nextPlayer === 'b' ? \"Black's Turn!\" : \"White's Turn!\";\n    } //If stones were captured\n\n\n    if (numStonesCaptured !== 0) {\n      if (this.state.currentPlayer === this.state.player1Color) {\n        newPlayer1Captures += numStonesCaptured;\n      } else {\n        newPlayer2Captures += numStonesCaptured;\n      }\n    }\n\n    this.setState({\n      board: newBoard,\n      currentPlayer: nextPlayer,\n      playerTurnStatus: newPlayerTurnStatus,\n      errorMessage: newErrorMessage,\n      player1Captures: newPlayer1Captures,\n      player2Captures: newPlayer2Captures\n    });\n  }\n\n  handleClick(i, j) {\n    this.makeMove(i, j);\n  }\n\n  renderGameInfo() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"player1-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Player 1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 11\n        }, this), this.state.player1Captures, \" captures\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"player2-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Player 2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 11\n        }, this), this.state.player2Captures, \" captures\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"turn-info\",\n        children: [this.state.playerTurnStatus, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 11\n        }, this), this.state.errorMessage]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pass-resign-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"pass-button\",\n          onClick: 9,\n          children: \"Pass\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"resign-button\",\n          onClick: 10,\n          children: \"Resign\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 7\n    }, this);\n  }\n\n  renderCoord(i) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"coords-box\",\n      children: i\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 7\n    }, this);\n  }\n\n  renderCoords() {\n    const boardSize = 10;\n    let outCoords = [];\n\n    for (let i = 0; i < boardSize; i++) {\n      outCoords.push(this.renderCoord(i));\n    }\n\n    console.log(outCoords.length);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"vertical-coords-container\",\n      children: outCoords\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 7\n    }, this);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: [this.renderCoords(), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-board\",\n        children: /*#__PURE__*/_jsxDEV(Board, {\n          board: this.state.board,\n          boardSize: this.state.boardSize,\n          onClick: (i, j) => this.handleClick(i, j)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 357,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 9\n      }, this), this.renderGameInfo()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Game\",\n      children: /*#__PURE__*/_jsxDEV(Game, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 374,\n    columnNumber: 5\n  }, this);\n}\n\n_c2 = App;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Tile\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["/Users/dylankriegman/Desktop/Go-Web-App-V2/go-game-frontend/src/App.js"],"names":["React","Tile","props","width","height","useWindowSize","minDim","tileSize","toString","radius","stoneRadius","prevRadius","onClick","onMouseEnter","mouseExit","stoneFill","isUndefined","window","windowSize","setWindowSize","useState","innerWidth","innerHeight","changeWindowSize","useEffect","addEventListener","removeEventListener","Board","Component","renderTile","row","col","board","render","boardSize","boardRow","push","Game","constructor","Array","state","player1Captures","player2Captures","currentPlayer","playerTurnStatus","errorMessage","player1Name","player2Name","player1Color","player2Color","isValidPos","captureHelper","checkedNeighbors","console","log","playerColor","directions","numOfLiberties","neighbors","strRowCol","i","length","direction","adjRow","adjCol","adjValue","strAdjPos","has","add","neighbor","parsedNeighborPos","split","neighborRow","parseInt","neighborCol","getCapturedOpponents","capturedOpponents","opponentColor","j","isEmpty","numberOfLiberties","Set","runMoveProcedure","numCaptures","numLiberties","k","capturedPos","capturedRow","capturedCol","makeMove","moveOutput","slice","newBoard","numStonesCaptured","newErrorMessage","newPlayer1Captures","newPlayer2Captures","newPlayerTurnStatus","nextPlayer","setState","handleClick","renderGameInfo","renderCoord","renderCoords","outCoords","App"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,SAASC,IAAT,CAAcC,KAAd,EAAsB;AAAA;;AAClB,QAAM;AAACC,IAAAA,KAAD;AAAOC,IAAAA;AAAP,MAAeC,aAAa,EAAlC;AACA,QAAMC,MAAM,GAACH,KAAK,GAACC,MAAN,GAAeD,KAAf,GAAqBC,MAAlC;AACA,QAAMG,QAAQ,GAAC,CAAE,MAAID,MAAL,GAAa,CAAd,EAAiBE,QAAjB,EAAf;AACA,QAAMC,MAAM,GAAEP,KAAK,CAACQ,WAAN,GAAkB,CAAlB,GAAwBH,QAAQ,GAAC,CAAV,GAAa,CAApC,GAAuC,CAArD;AACA,QAAMI,UAAU,GAACF,MAAM,IAAE,CAAR,GAAaF,QAAQ,GAAC,CAAV,GAAa,CAAzB,GAA2B,CAA5C;AAEA;AAAA;AACE;AACA;AACA;AACA;AACA;AACA;AAAQ,MAAA,SAAS,EAAC,MAAlB;AAAyB,MAAA,OAAO,EAAEL,KAAK,CAACU,OAAxC;AAAiD,MAAA,YAAY,EAAEV,KAAK,CAACW,YAArE;AAAmF,MAAA,YAAY,EAAEX,KAAK,CAACY,SAAvG;AAAA,6BACE;AAAK,QAAA,KAAK,EAAEP,QAAZ;AAAsB,QAAA,MAAM,EAAEA,QAA9B;AAAA,gCACE;AAAS,UAAA,CAAC,EAAEE,MAAZ;AAAoB,UAAA,EAAE,EAAEF,QAAQ,GAAC,CAAjC;AAAoC,UAAA,EAAE,EAAEA,QAAQ,GAAC,CAAjD;AAAoD,UAAA,MAAM,EAAC,OAA3D;AAAmE,UAAA,WAAW,EAAC,GAA/E;AAAmF,UAAA,IAAI,EAAEL,KAAK,CAACa;AAA/F;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAQ,UAAA,SAAS,EAAC,YAAlB;AAA+B,UAAA,CAAC,EAAEJ,UAAlC;AAA8C,UAAA,EAAE,EAAEJ,QAAQ,GAAC,CAA3D;AAA8D,UAAA,EAAE,EAAEA,QAAQ,GAAC,CAA3E;AAA8E,UAAA,MAAM,EAAC,OAArF;AAA6F,UAAA,WAAW,EAAC;AAAzG;AAAA;AAAA;AAAA;AAAA,gBAFF,sCAGiCI,UAHjC,UAGiDJ,QAAQ,GAAC,CAH1D,UAGiEA,QAAQ,GAAC,CAH1E;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AANF;AAoBH,C,CAGD;AACA;;;GA/BSN,I;UACgBI,a;;;KADhBJ,I;;AAgCT,SAASI,aAAT,GAAyB;AAAA;;AACvB,QAAMW,WAAW,GAAC,OAAOC,MAAP,IAAgB,WAAlC;AACA,QAAM,CAACC,UAAD,EAAYC,aAAZ,IAA2BnB,KAAK,CAACoB,QAAN,CAAe;AAC9CjB,IAAAA,KAAK,EAAEa,WAAW,GAAG,IAAH,GAAQC,MAAM,CAACI,UADa;AAE9CjB,IAAAA,MAAM,EAACY,WAAW,GAAG,GAAH,GAAOC,MAAM,CAACK;AAFc,GAAf,CAAjC;;AAKA,WAASC,gBAAT,GAA4B;AAC1BJ,IAAAA,aAAa,CAAC;AAAChB,MAAAA,KAAK,EAACc,MAAM,CAACI,UAAd;AAAyBjB,MAAAA,MAAM,EAACa,MAAM,CAACK;AAAvC,KAAD,CAAb;AACD;;AAEDtB,EAAAA,KAAK,CAACwB,SAAN,CAAgB,MAAK;AACnBP,IAAAA,MAAM,CAACQ,gBAAP,CAAwB,QAAxB,EAAiC,MAAK;AACpCN,MAAAA,aAAa,CAAC;AAAChB,QAAAA,KAAK,EAACc,MAAM,CAACI,UAAd;AAAyBjB,QAAAA,MAAM,EAACa,MAAM,CAACK;AAAvC,OAAD,CAAb;AACD,KAFD;AAGA,WAAO,MAAM;AACXL,MAAAA,MAAM,CAACS,mBAAP,CAA2B,QAA3B,EAAoC,MAAM;AACxCP,QAAAA,aAAa,CAAC;AAAChB,UAAAA,KAAK,EAACc,MAAM,CAACI,UAAd;AAAyBjB,UAAAA,MAAM,EAACa,MAAM,CAACK;AAAvC,SAAD,CAAb;AACD,OAFD;AAGD,KAJD;AAKD,GATD,EASE,EATF;AAUA,SAAOJ,UAAP;AACD;;IAtBQb,a;;AA0BT,MAAMsB,KAAN,SAAoB3B,KAAK,CAAC4B,SAA1B,CAAoC;AAClCC,EAAAA,UAAU,CAACC,GAAD,EAAKC,GAAL,EAAU;AAClB,wBACE,QAAC,IAAD;AACA,MAAA,OAAO,EAAE,MAAI,KAAK7B,KAAL,CAAWU,OAAX,CAAmBkB,GAAnB,EAAuBC,GAAvB,CADb;AAEA,MAAA,WAAW,EAAE,KAAK7B,KAAL,CAAW8B,KAAX,CAAiBF,GAAjB,EAAsBC,GAAtB,MAA6B,GAA7B,GAAmC,EAAnC,GAAsC,CAFnD;AAGA,MAAA,SAAS,EAAE,KAAK7B,KAAL,CAAW8B,KAAX,CAAiBF,GAAjB,EAAsBC,GAAtB,MAA6B,GAA7B,GAAmC,OAAnC,GAA2C;AAHtD;AAAA;AAAA;AAAA;AAAA,YADF;AAOD;;AACDE,EAAAA,MAAM,GAAG;AACP,UAAMD,KAAK,GAAC,EAAZ;;AACA,SAAI,IAAIF,GAAG,GAAC,CAAZ,EAAcA,GAAG,GAAC,KAAK5B,KAAL,CAAWgC,SAA7B,EAAuCJ,GAAG,EAA1C,EAA8C;AAC5C,YAAMK,QAAQ,GAAC,EAAf;;AACA,WAAI,IAAIJ,GAAG,GAAC,CAAZ,EAAcA,GAAG,GAAC,KAAK7B,KAAL,CAAWgC,SAA7B,EAAuCH,GAAG,EAA1C,EAA8C;AAC5CI,QAAAA,QAAQ,CAACC,IAAT,CAAc,KAAKP,UAAL,CAAgBC,GAAhB,EAAoBC,GAApB,CAAd;AACD;;AACDC,MAAAA,KAAK,CAACI,IAAN,eAAW;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA,kBAA4BD;AAA5B;AAAA;AAAA;AAAA;AAAA,cAAX;AACD;;AACD,wBACE;AAAA,gBACGH;AADH;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AAxBiC,C,CA2BpC;;;AACA,MAAMK,IAAN,SAAmBrC,KAAK,CAAC4B,SAAzB,CAAmC;AACjCU,EAAAA,WAAW,CAACpC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKgC,SAAL,GAAe,CAAf;AAEA,QAAIP,KAAK,GAAC,IAAIY,KAAJ,CAAU,KAAKL,SAAf,CAAV;;AACA,SAAI,IAAIJ,GAAG,GAAC,CAAZ,EAAcA,GAAG,GAAC,KAAKI,SAAvB,EAAiCJ,GAAG,EAApC,EAAwC;AACtCH,MAAAA,KAAK,CAACG,GAAD,CAAL,GAAW,IAAIS,KAAJ,CAAU,KAAKL,SAAf,CAAX;AACD;;AACD,SAAI,IAAIJ,GAAG,GAAC,CAAZ,EAAcA,GAAG,GAAC,KAAKI,SAAvB,EAAiCJ,GAAG,EAApC,EAAwC;AACtC,WAAI,IAAIC,GAAG,GAAC,CAAZ,EAAcA,GAAG,GAAC,KAAKG,SAAvB,EAAiCH,GAAG,EAApC,EAAwC;AACtCJ,QAAAA,KAAK,CAACG,GAAD,CAAL,CAAWC,GAAX,IAAgB,GAAhB;AACD;AACF;;AACD,SAAKS,KAAL,GAAW;AACTC,MAAAA,eAAe,EAAC,CADP;AAETC,MAAAA,eAAe,EAAC,CAFP;AAGTC,MAAAA,aAAa,EAAC,GAHL;AAITX,MAAAA,KAAK,EAACL,KAJG;AAKTO,MAAAA,SAAS,EAAC,KAAKA,SALN;AAMTU,MAAAA,gBAAgB,EAAC,eANR;AAOTC,MAAAA,YAAY,EAAC,EAPJ;AAQTC,MAAAA,WAAW,EAAC,UARH;AASTC,MAAAA,WAAW,EAAC,UATH;AAUTC,MAAAA,YAAY,EAAC,GAVJ;AAWTC,MAAAA,YAAY,EAAC;AAXJ,KAAX;AAaD;;AAGDC,EAAAA,UAAU,CAACpB,GAAD,EAAKC,GAAL,EAAU;AAClB,QAAGD,GAAG,IAAE,CAAL,IAAUA,GAAG,GAAC,KAAKI,SAAtB,EAAiC;AAC/B,UAAGH,GAAG,IAAE,CAAL,IAAUA,GAAG,GAAC,KAAKG,SAAtB,EAAiC;AAC/B,eAAO,IAAP;AACD;AACF;;AACD,WAAO,KAAP;AACD,GArCgC,CAuCjC;AACA;;;AACAiB,EAAAA,aAAa,CAACnB,KAAD,EAAOF,GAAP,EAAWC,GAAX,EAAeqB,gBAAf,EAAiC;AAC5CC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAOF,gBAAnB;AACA,UAAMG,WAAW,GAACvB,KAAK,CAACF,GAAD,CAAL,CAAWC,GAAX,CAAlB;AACA,UAAMyB,UAAU,GAAC,CAAC,CAAC,CAAC,CAAF,EAAI,CAAJ,CAAD,EAAQ,CAAC,CAAD,EAAG,CAAH,CAAR,EAAc,CAAC,CAAD,EAAG,CAAH,CAAd,EAAoB,CAAC,CAAD,EAAG,CAAC,CAAJ,CAApB,CAAjB;AACA,QAAIC,cAAc,GAAC,CAAnB;AACA,QAAIC,SAAS,GAAC,EAAd;AACA,UAAMC,SAAS,GAAE7B,GAAG,CAACtB,QAAJ,EAAD,GAAiB,GAAjB,GAAsBuB,GAAG,CAACvB,QAAJ,EAAtC;;AACA,SAAI,IAAIoD,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACJ,UAAU,CAACK,MAAzB,EAAgCD,CAAC,EAAjC,EAAqC;AACnC,YAAME,SAAS,GAACN,UAAU,CAACI,CAAD,CAA1B;AACA,YAAMG,MAAM,GAACjC,GAAG,GAACgC,SAAS,CAAC,CAAD,CAA1B;AACA,YAAME,MAAM,GAACjC,GAAG,GAAC+B,SAAS,CAAC,CAAD,CAA1B;;AAEA,UAAG,KAAKZ,UAAL,CAAgBa,MAAhB,EAAuBC,MAAvB,CAAH,EAAmC;AACjC,cAAMC,QAAQ,GAACjC,KAAK,CAAC+B,MAAD,CAAL,CAAcC,MAAd,CAAf;AACA,cAAME,SAAS,GAAEH,MAAM,CAACvD,QAAP,EAAD,GAAoB,GAApB,GAAyBwD,MAAM,CAACxD,QAAP,EAAzC;;AACA,YAAGyD,QAAQ,KAAG,GAAd,EAAmB;AACjBR,UAAAA,cAAc,IAAE,CAAhB;AACD,SAFD,MAGK,IAAGQ,QAAQ,KAAGV,WAAX,IAA2B,CAACH,gBAAgB,CAACe,GAAjB,CAAqBD,SAArB,CAA/B,EAAgE;AACnER,UAAAA,SAAS,CAACtB,IAAV,CAAe8B,SAAf;AACD;AACF;AACF;;AAED,QAAGT,cAAc,KAAG,CAAjB,IAAsBC,SAAS,CAACG,MAAV,KAAmB,CAA5C,EAA+C;AAC7CT,MAAAA,gBAAgB,CAACgB,GAAjB,CAAqBT,SAArB;;AACA,WAAI,IAAIC,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACF,SAAS,CAACG,MAAxB,EAA+BD,CAAC,EAAhC,EAAoC;AAClC,cAAMS,QAAQ,GAACX,SAAS,CAACE,CAAD,CAAxB;AACA,cAAMU,iBAAiB,GAACD,QAAQ,CAACE,KAAT,CAAe,GAAf,CAAxB;AACA,cAAMC,WAAW,GAACC,QAAQ,CAACH,iBAAiB,CAAC,CAAD,CAAlB,CAA1B;AACA,cAAMI,WAAW,GAACD,QAAQ,CAACH,iBAAiB,CAAC,CAAD,CAAlB,CAA1B;AACAb,QAAAA,cAAc,IAAE,KAAKN,aAAL,CAAmBnB,KAAnB,EAAyBwC,WAAzB,EAAqCE,WAArC,EAAiDtB,gBAAjD,CAAhB;AACD;;AACD,aAAOK,cAAP;AACD,KAVD,MAWK,IAAIA,cAAc,KAAG,CAAjB,IAAsBC,SAAS,CAACG,MAAV,KAAmB,CAA7C,EAAgD;AACnD,aAAO,CAAP;AACD,KAFI,MAGA;AACH,aAAOJ,cAAP;AACD;AACF,GAlFgC,CAoFjC;AACA;AACA;;;AACAkB,EAAAA,oBAAoB,CAAC3C,KAAD,EAAQ;AAC1B,QAAI4C,iBAAiB,GAAC,EAAtB;AACA,UAAMC,aAAa,GAAC,KAAKrC,KAAL,CAAWG,aAAX,KAA2B,GAA3B,GAAiC,GAAjC,GAAqC,GAAzD;;AACA,SAAI,IAAIiB,CAAC,GAAC,CAAV,EAAYA,CAAC,GAAC,KAAKpB,KAAL,CAAWN,SAAzB,EAAmC0B,CAAC,EAApC,EAAwC;AACtC,WAAI,IAAIkB,CAAC,GAAC,CAAV,EAAYA,CAAC,GAAC,KAAKtC,KAAL,CAAWN,SAAzB,EAAmC4C,CAAC,EAApC,EAAwC;AACtC,cAAMC,OAAO,GAAC/C,KAAK,CAAC4B,CAAD,CAAL,CAASkB,CAAT,MAAc,GAA5B;;AACA,YAAG,CAACC,OAAD,IAAY/C,KAAK,CAAC4B,CAAD,CAAL,CAASkB,CAAT,MAAcD,aAA7B,EAA4C;AAC1C,gBAAMG,iBAAiB,GAAC,KAAK7B,aAAL,CAAmBnB,KAAnB,EAAyB4B,CAAzB,EAA2BkB,CAA3B,EAA6B,IAAIG,GAAJ,EAA7B,CAAxB;;AACA,cAAGD,iBAAiB,KAAG,CAAvB,EAA0B;AACxBJ,YAAAA,iBAAiB,CAACxC,IAAlB,CAAuB,CAACwB,CAAD,EAAGkB,CAAH,CAAvB;AACD;AACF;AACF;AACF;;AACD,WAAOF,iBAAP;AACD,GAtGgC,CAwGjC;AACA;;;AACAM,EAAAA,gBAAgB,CAAClD,KAAD,EAAO4B,CAAP,EAASkB,CAAT,EAAY;AAC1B,QAAIjC,YAAY,GAAC,EAAjB;AACA,QAAIsC,WAAW,GAAC,CAAhB,CAF0B,CAI1B;;AACA,QAAGnD,KAAK,CAAC4B,CAAD,CAAL,CAASkB,CAAT,MAAc,GAAjB,EAAsB;AACpBjC,MAAAA,YAAY,GAAC,eAAb;AACA,aAAO,CAACb,KAAD,EAAOmD,WAAP,EAAmBtC,YAAnB,CAAP;AACD,KARyB,CAU1B;;;AACAb,IAAAA,KAAK,CAAC4B,CAAD,CAAL,CAASkB,CAAT,IAAY,KAAKtC,KAAL,CAAWG,aAAvB,CAX0B,CAe1B;;AACA,UAAMiC,iBAAiB,GAAC,KAAKD,oBAAL,CAA0B3C,KAA1B,CAAxB,CAhB0B,CAiB1B;;AACA,QAAG4C,iBAAiB,CAACf,MAAlB,KAA2B,CAA9B,EAAiC;AAC/B;AAEA,YAAMuB,YAAY,GAAC,KAAKjC,aAAL,CAAmBnB,KAAnB,EAAyB4B,CAAzB,EAA2BkB,CAA3B,EAA6B,IAAIG,GAAJ,EAA7B,CAAnB,CAH+B,CAK/B;;AACA,UAAGG,YAAY,KAAG,CAAlB,EAAqB;AACnB;AACA;AACA;AACApD,QAAAA,KAAK,CAAC4B,CAAD,CAAL,CAASkB,CAAT,IAAY,GAAZ;AACAjC,QAAAA,YAAY,GAAC,eAAb;AACAsC,QAAAA,WAAW,GAAC,CAAZ;AACA,eAAO,CAACnD,KAAD,EAAOmD,WAAP,EAAmBtC,YAAnB,CAAP;AACD,OARD,CASA;AATA,WAUK;AACHsC,UAAAA,WAAW,GAAC,CAAZ;AACA,iBAAO,CAACnD,KAAD,EAAOmD,WAAP,EAAmBtC,YAAnB,CAAP;AACD;AACF,KApBD,CAsBA;AAtBA,SAuBK;AACHsC,QAAAA,WAAW,GAACP,iBAAiB,CAACf,MAA9B,CADG,CAEH;;AACA,aAAI,IAAIwB,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACT,iBAAiB,CAACf,MAAhC,EAAuCwB,CAAC,EAAxC,EAA4C;AAC1C,gBAAMC,WAAW,GAACV,iBAAiB,CAACS,CAAD,CAAnC;AACA,gBAAME,WAAW,GAACD,WAAW,CAAC,CAAD,CAA7B;AACA,gBAAME,WAAW,GAACF,WAAW,CAAC,CAAD,CAA7B;AACAtD,UAAAA,KAAK,CAACuD,WAAD,CAAL,CAAmBC,WAAnB,IAAgC,GAAhC;AACD;;AACD,eAAO,CAACxD,KAAD,EAAOmD,WAAP,EAAmBtC,YAAnB,CAAP;AACD;AACF;;AAID4C,EAAAA,QAAQ,CAAC7B,CAAD,EAAGkB,CAAH,EAAM;AAEZ,UAAMY,UAAU,GAAC,KAAKR,gBAAL,CAAsB,KAAK1C,KAAL,CAAWR,KAAX,CAAiB2D,KAAjB,EAAtB,EAA+C/B,CAA/C,EAAiDkB,CAAjD,CAAjB;AACA,UAAMc,QAAQ,GAACF,UAAU,CAAC,CAAD,CAAzB;AACA,UAAMG,iBAAiB,GAACH,UAAU,CAAC,CAAD,CAAlC;AACA,UAAMI,eAAe,GAACJ,UAAU,CAAC,CAAD,CAAhC;AAEA,QAAIK,kBAAkB,GAAC,KAAKvD,KAAL,CAAWC,eAAlC;AACA,QAAIuD,kBAAkB,GAAC,KAAKxD,KAAL,CAAWE,eAAlC;AACA,QAAIuD,mBAAmB,GAAC,KAAKzD,KAAL,CAAWI,gBAAnC;AACA,QAAIsD,UAAU,GAAC,KAAK1D,KAAL,CAAWG,aAA1B,CAVY,CAYZ;;AACA,QAAGmD,eAAe,KAAG,EAArB,EAAyB;AACvBI,MAAAA,UAAU,GAAE,KAAK1D,KAAL,CAAWG,aAAX,KAA2B,GAA5B,GAAmC,GAAnC,GAAuC,GAAlD;AACAsD,MAAAA,mBAAmB,GAAEC,UAAU,KAAG,GAAd,GAAqB,eAArB,GAAqC,eAAzD;AACD,KAhBW,CAiBZ;;;AACA,QAAGL,iBAAiB,KAAG,CAAvB,EAA0B;AACxB,UAAG,KAAKrD,KAAL,CAAWG,aAAX,KAA2B,KAAKH,KAAL,CAAWQ,YAAzC,EAAuD;AACrD+C,QAAAA,kBAAkB,IAAEF,iBAApB;AACD,OAFD,MAGK;AACHG,QAAAA,kBAAkB,IAAEH,iBAApB;AACD;AACF;;AAED,SAAKM,QAAL,CAAc;AACZnE,MAAAA,KAAK,EAAC4D,QADM;AAEZjD,MAAAA,aAAa,EAACuD,UAFF;AAGZtD,MAAAA,gBAAgB,EAACqD,mBAHL;AAIZpD,MAAAA,YAAY,EAACiD,eAJD;AAKZrD,MAAAA,eAAe,EAACsD,kBALJ;AAMZrD,MAAAA,eAAe,EAACsD;AANJ,KAAd;AASD;;AAEDI,EAAAA,WAAW,CAACxC,CAAD,EAAGkB,CAAH,EAAM;AACf,SAAKW,QAAL,CAAc7B,CAAd,EAAgBkB,CAAhB;AACD;;AAEDuB,EAAAA,cAAc,GAAG;AACf,wBACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAIG,KAAK7D,KAAL,CAAWC,eAJd;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAOE;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAIG,KAAKD,KAAL,CAAWE,eAJd;AAAA;AAAA;AAAA;AAAA;AAAA,cAPF,eAaE;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA,mBACG,KAAKF,KAAL,CAAWI,gBADd,eAEE;AAAA;AAAA;AAAA;AAAA,gBAFF,EAGG,KAAKJ,KAAL,CAAWK,YAHd;AAAA;AAAA;AAAA;AAAA;AAAA,cAbF,eAkBE;AAAK,QAAA,SAAS,EAAC,uBAAf;AAAA,gCACE;AAAQ,UAAA,SAAS,EAAC,aAAlB;AAAgC,UAAA,OAAO,EAAE,CAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAIE;AAAQ,UAAA,SAAS,EAAC,eAAlB;AAAkC,UAAA,OAAO,EAAE,EAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJF;AAAA;AAAA;AAAA;AAAA;AAAA,cAlBF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAgCD;;AAEDyD,EAAAA,WAAW,CAAC1C,CAAD,EAAI;AACb,wBACE;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA,gBACGA;AADH;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AAED2C,EAAAA,YAAY,GAAG;AACb,UAAMrE,SAAS,GAAC,EAAhB;AACA,QAAIsE,SAAS,GAAC,EAAd;;AACA,SAAI,IAAI5C,CAAC,GAAC,CAAV,EAAYA,CAAC,GAAC1B,SAAd,EAAwB0B,CAAC,EAAzB,EAA6B;AAC3B4C,MAAAA,SAAS,CAACpE,IAAV,CAAe,KAAKkE,WAAL,CAAiB1C,CAAjB,CAAf;AACD;;AACDP,IAAAA,OAAO,CAACC,GAAR,CAAYkD,SAAS,CAAC3C,MAAtB;AACA,wBACE;AAAK,MAAA,SAAS,EAAC,2BAAf;AAAA,gBACG2C;AADH;AAAA;AAAA;AAAA;AAAA,YADF;AAMD;;AAEDvE,EAAAA,MAAM,GAAG;AAEP,wBACE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA,iBACG,KAAKsE,YAAL,EADH,eAEE;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA,+BACE,QAAC,KAAD;AACA,UAAA,KAAK,EAAE,KAAK/D,KAAL,CAAWR,KADlB;AAEA,UAAA,SAAS,EAAE,KAAKQ,KAAL,CAAWN,SAFtB;AAGA,UAAA,OAAO,EAAE,CAAC0B,CAAD,EAAGkB,CAAH,KAAO,KAAKsB,WAAL,CAAiBxC,CAAjB,EAAmBkB,CAAnB;AAHhB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAFF,EAUG,KAAKuB,cAAL,EAVH;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAeD;;AAvRgC;;AA2RnC,SAASI,GAAT,GAAe;AACb,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA,6BACE,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;MARQA,G;AAYT,eAAeA,GAAf","sourcesContent":["import React from 'react';\n\nfunction Tile(props)  {\n    const {width,height}=useWindowSize();\n    const minDim=width<height ? width:height;\n    const tileSize=((0.9*minDim)/9).toString();\n    const radius=(props.stoneRadius>0 ? ((tileSize/2)-3):0);\n    const prevRadius=radius==0 ? (tileSize/2)-3:0;\n    \n    return (\n      //define a on mouse enter event and an on mouse leave event\n      //on mouse enter call a function that modified a value so that \n      //the value holds an svg of the players stone\n      //on mouse exit call a function that modified the value so that it\n      //holds nothing\n      <button className=\"tile\" onClick={props.onClick} onMouseEnter={props.onMouseEnter} onMouseLeave={props.mouseExit}>\n        <svg width={tileSize} height={tileSize}>\n          <circle  r={radius} cx={tileSize/2} cy={tileSize/2} stroke=\"black\" strokeWidth=\"1\" fill={props.stoneFill} />\n          <circle className=\"black-circ\" r={prevRadius} cx={tileSize/2} cy={tileSize/2} stroke=\"black\" strokeWidth=\"1\" />\n          circle className=\"red-circ\" r={prevRadius} cx={tileSize/2} cy={tileSize/2} stroke=\"black\" strokeWidth=\"1\" />\n        \n        </svg>\n        \n\n        \n\n      </button>\n      );\n      \n}\n\n\n//store in utils/useWindowSize\n//import useWindowSize from \"../utils/useWindowSize\"\nfunction useWindowSize() {\n  const isUndefined=typeof(window)==\"undefined\";\n  const [windowSize,setWindowSize]=React.useState({\n    width: isUndefined ? 1200:window.innerWidth,\n    height:isUndefined ? 800:window.innerHeight,\n  });\n\n  function changeWindowSize() {\n    setWindowSize({width:window.innerWidth,height:window.innerHeight});\n  }\n\n  React.useEffect(()=> {\n    window.addEventListener(\"resize\",()=> {\n      setWindowSize({width:window.innerWidth,height:window.innerHeight});\n    });\n    return () => {\n      window.removeEventListener(\"resize\",() => {\n        setWindowSize({width:window.innerWidth,height:window.innerHeight});\n      });\n    };\n  },[]);\n  return windowSize;\n}\n\n\n\nclass Board extends React.Component {\n  renderTile(row,col) {\n    return (\n      <Tile\n      onClick={()=>this.props.onClick(row,col)}\n      stoneRadius={this.props.board[row][col]!=='n' ? 14:0}\n      stoneFill={this.props.board[row][col]==='b' ? 'black':'white'}\n      />\n    );\n  }\n  render() {\n    const board=[];\n    for(let row=0;row<this.props.boardSize;row++) {\n      const boardRow=[];\n      for(let col=0;col<this.props.boardSize;col++) {\n        boardRow.push(this.renderTile(row,col));\n      }\n      board.push(<div className=\"board-row\">{boardRow}</div>)\n    }\n    return (\n      <div>\n        {board}\n      </div>\n    );\n  }\n}\n\n//Handles Game Logic\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.boardSize=9;\n\n    let Board=new Array(this.boardSize);\n    for(let row=0;row<this.boardSize;row++) {\n      Board[row]=new Array(this.boardSize);\n    }\n    for(let row=0;row<this.boardSize;row++) {\n      for(let col=0;col<this.boardSize;col++) {\n        Board[row][col]='n';\n      }\n    }\n    this.state={\n      player1Captures:0,\n      player2Captures:0,\n      currentPlayer:'b',\n      board:Board,\n      boardSize:this.boardSize,\n      playerTurnStatus:\"Black's Turn!\",\n      errorMessage:\"\",\n      player1Name:'Player 1',\n      player2Name:'Player 2',\n      player1Color:'b',\n      player2Color:'w',\n    };\n  }\n\n\n  isValidPos(row,col) {\n    if(row>=0 && row<this.boardSize) {\n      if(col>=0 && col<this.boardSize) {\n        return true;\n      }\n    }\n    return false;\n  }\n  \n  //returns the number of liberties that a stone or group of connected stones has\n  //expects the row and col of the stone or a row col in the group as input\n  captureHelper(board,row,col,checkedNeighbors) {\n    console.log(typeof(checkedNeighbors));\n    const playerColor=board[row][col]\n    const directions=[[-1,0],[1,0],[0,1],[0,-1]];\n    let numOfLiberties=0;\n    let neighbors=[];\n    const strRowCol=(row.toString())+\".\"+(col.toString());\n    for(let i=0;i<directions.length;i++) {\n      const direction=directions[i];\n      const adjRow=row+direction[0];\n      const adjCol=col+direction[1];\n      \n      if(this.isValidPos(adjRow,adjCol)) {\n        const adjValue=board[adjRow][adjCol];\n        const strAdjPos=(adjRow.toString())+\".\"+(adjCol.toString());\n        if(adjValue==='n') {\n          numOfLiberties+=1;\n        }\n        else if(adjValue===playerColor &&  !checkedNeighbors.has(strAdjPos)) {\n          neighbors.push(strAdjPos);\n        }\n      }\n    }\n\n    if(numOfLiberties===0 && neighbors.length!==0) {\n      checkedNeighbors.add(strRowCol);\n      for(let i=0;i<neighbors.length;i++) {\n        const neighbor=neighbors[i];\n        const parsedNeighborPos=neighbor.split(\".\");\n        const neighborRow=parseInt(parsedNeighborPos[0]);\n        const neighborCol=parseInt(parsedNeighborPos[1]);\n        numOfLiberties+=this.captureHelper(board,neighborRow,neighborCol,checkedNeighbors);\n      }\n      return numOfLiberties;\n    }\n    else if (numOfLiberties===0 && neighbors.length===0) {\n      return 0;\n    }\n    else {\n      return numOfLiberties;\n    }\n  }\n\n  //Iterates through the board and checks if any of the opponents stones\n  //have been captured\n  //Returns a list of coordinates of captured stones\n  getCapturedOpponents(board) {\n    let capturedOpponents=[]\n    const opponentColor=this.state.currentPlayer==='b' ? 'w':'b';\n    for(let i=0;i<this.state.boardSize;i++) {\n      for(let j=0;j<this.state.boardSize;j++) {\n        const isEmpty=board[i][j]==='n';\n        if(!isEmpty && board[i][j]===opponentColor) {\n          const numberOfLiberties=this.captureHelper(board,i,j,new Set());\n          if(numberOfLiberties===0) {\n            capturedOpponents.push([i,j]);\n          }\n        }\n      }\n    }\n    return capturedOpponents;\n  }\n\n  //run move procedure\n  //returns error and new board\n  runMoveProcedure(board,i,j) {\n    let errorMessage=\"\";\n    let numCaptures=0;\n\n    //if the tile is occupied\n    if(board[i][j]!=='n') {\n      errorMessage='Invalid Move!';\n      return [board,numCaptures,errorMessage];\n    }\n\n    //places the current players stone at (i,j)\n    board[i][j]=this.state.currentPlayer;\n    \n\n\n    //checks if any stones were captured\n    const capturedOpponents=this.getCapturedOpponents(board);\n    //if no stones were captured check the following 2 cases\n    if(capturedOpponents.length===0) {\n      //Finding out how many liberties the group at (i,j) has\n\n      const numLiberties=this.captureHelper(board,i,j,new Set());\n\n      //Case 1 (the stone or group placed has no liberties)\n      if(numLiberties===0) {\n        //Remove the current player's stone from (i,j)\n        //And display invalid move message\n        //should return error message of some kind\n        board[i][j]='n'\n        errorMessage=\"Invalid Move!\"\n        numCaptures=0;\n        return [board,numCaptures,errorMessage];\n      }\n      //Case 2 (the stone or group placed has liberties)\n      else {\n        numCaptures=0;\n        return [board,numCaptures,errorMessage];\n      }\n    }\n\n    //If stones were captured\n    else {\n      numCaptures=capturedOpponents.length;\n      //Remove the captured stones from the board\n      for(let k=0;k<capturedOpponents.length;k++) {\n        const capturedPos=capturedOpponents[k];\n        const capturedRow=capturedPos[0];\n        const capturedCol=capturedPos[1];\n        board[capturedRow][capturedCol]=\"n\"\n      }\n      return [board,numCaptures,errorMessage];\n    }\n  }\n\n\n\n  makeMove(i,j) {\n\n    const moveOutput=this.runMoveProcedure(this.state.board.slice(),i,j);\n    const newBoard=moveOutput[0];\n    const numStonesCaptured=moveOutput[1]\n    const newErrorMessage=moveOutput[2];\n\n    let newPlayer1Captures=this.state.player1Captures\n    let newPlayer2Captures=this.state.player2Captures;\n    let newPlayerTurnStatus=this.state.playerTurnStatus;\n    let nextPlayer=this.state.currentPlayer;\n\n    //The move was successful\n    if(newErrorMessage==='') {\n      nextPlayer=(this.state.currentPlayer==='b') ? 'w':'b';\n      newPlayerTurnStatus=(nextPlayer==='b') ? \"Black's Turn!\":\"White's Turn!\";\n    }\n    //If stones were captured\n    if(numStonesCaptured!==0) {\n      if(this.state.currentPlayer===this.state.player1Color) {\n        newPlayer1Captures+=numStonesCaptured;\n      }\n      else {\n        newPlayer2Captures+=numStonesCaptured\n      }\n    }\n\n    this.setState({\n      board:newBoard,\n      currentPlayer:nextPlayer,\n      playerTurnStatus:newPlayerTurnStatus,\n      errorMessage:newErrorMessage,\n      player1Captures:newPlayer1Captures,\n      player2Captures:newPlayer2Captures\n    });\n    \n  }\n\n  handleClick(i,j) {\n    this.makeMove(i,j);\n  }\n\n  renderGameInfo() {\n    return (\n      <div className=\"game-info\">\n        <div className=\"player1-info\">\n          <h3>\n            Player 1\n          </h3>\n          {this.state.player1Captures} captures\n        </div>\n        <div className=\"player2-info\">\n          <h3>\n            Player 2\n          </h3>\n          {this.state.player2Captures} captures\n        </div>\n        <div className=\"turn-info\">\n          {this.state.playerTurnStatus}\n          <br></br>\n          {this.state.errorMessage}\n        </div>\n        <div className=\"pass-resign-container\">\n          <button className=\"pass-button\" onClick={9}>\n            Pass\n          </button>\n          <button className=\"resign-button\" onClick={10}>\n            Resign\n          </button>\n        </div>\n      \n      </div>\n\n    );\n\n  }\n\n  renderCoord(i) {\n    return (\n      <div className=\"coords-box\">\n        {i}\n      </div>\n    );\n  } \n\n  renderCoords() {\n    const boardSize=10;\n    let outCoords=[]\n    for(let i=0;i<boardSize;i++) {\n      outCoords.push(this.renderCoord(i));\n    }\n    console.log(outCoords.length)\n    return (\n      <div className=\"vertical-coords-container\">\n        {outCoords}\n      </div>\n    );\n\n  }\n\n  render() {\n\n    return (\n      <div className=\"game\">\n        {this.renderCoords()}\n        <div className=\"game-board\">\n          <Board\n          board={this.state.board}\n          boardSize={this.state.boardSize}\n          onClick={(i,j)=>this.handleClick(i,j)}\n          >\n          </Board>\n        </div>\n        {this.renderGameInfo()}\n      </div>\n    );\n    \n  }\n}\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"Game\">\n        <Game />\n      </div>\n    </div>\n  );\n}\n\n\n\nexport default App;"]},"metadata":{},"sourceType":"module"}