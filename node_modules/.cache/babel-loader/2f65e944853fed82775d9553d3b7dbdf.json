{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/dylankriegman/Desktop/Go-Web-App/go-game-frontend/src/App.js\";\nimport React from 'react';\n\nfunction Tile(props) {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"tile\",\n    onClick: props.onClick,\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      height: \"34\",\n      width: \"34\",\n      children: /*#__PURE__*/_jsxDEV(\"circle\", {\n        cx: \"17\",\n        cy: \"17\",\n        r: props.stoneRadius,\n        stroke: \"black\",\n        strokeWidth: \"1\",\n        fill: props.stoneFill\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 7,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 7\n  }, this);\n}\n\n_c = Tile;\n\nclass Board extends React.Component {\n  renderTile(row, col) {\n    return /*#__PURE__*/_jsxDEV(Tile, {\n      onClick: () => this.props.onClick(row, col),\n      stoneRadius: this.props.filledPositions[row][col] !== 'n' ? 14 : 0,\n      stoneFill: this.props.filledPositions[row][col] === 'b' ? 'black' : 'white'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this);\n  }\n\n  render() {\n    const board = [];\n\n    for (let row = 0; row < 9; row++) {\n      const boardRow = [];\n\n      for (let col = 0; col < 9; col++) {\n        boardRow.push(this.renderTile(row, col));\n      }\n\n      board.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-row\",\n        children: boardRow\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 18\n      }, this));\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: board\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this);\n  }\n\n} //Handles Game Logic\n\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.boardSize = 9;\n    let Board = new Array(this.boardSize);\n\n    for (let row = 0; row < this.boardSize; row++) {\n      Board[row] = new Array(this.boardSize);\n    }\n\n    for (let row = 0; row < this.boardSize; row++) {\n      for (let col = 0; col < this.boardSize; col++) {\n        Board[row][col] = 'n';\n      }\n    }\n\n    this.state = {\n      currentPlayer: 'b',\n      board: Board,\n      playerTurnStatus: \"Black's Turn!\",\n      errorMessage: \"\"\n    };\n  }\n\n  isValidPos(row, col) {\n    if (row >= 0 && row < this.boardSize) {\n      if (col >= 0 && col < this.boardSize) {\n        return true;\n      }\n    }\n\n    return false;\n  } //returns the number of liberties that a stone or group of connected stones has\n  //expects the row and col of the stone or a row col in the group  as input\n\n\n  captureCheck(board, row, col, checkedNeighbors, opponentColor) {\n    //color of the stone that could be captured \n    const directions = [[-1, 0], [1, 0], [0, 1], [0, -1]];\n    let numOfLiberties = 0;\n    let neighbors = [];\n    let strRowCol = row.toString() + \".\" + col.toString();\n\n    for (let i = 0; i < directions.length; i++) {\n      let direction = directions[i];\n      let adjRow = row + direction[0];\n      let adjCol = col + direction[1];\n\n      if (this.isValidPos(adjRow, adjCol)) {\n        let adjValue = board[adjRow][adjCol];\n        let strAdjPos = adjRow.toString() + \".\" + adjCol.toString();\n\n        if (adjValue === 'n') {\n          numOfLiberties += 1;\n        } else if (adjValue === opponentColor && !checkedNeighbors.includes(strAdjPos)) {\n          neighbors.push(strAdjPos);\n        }\n      }\n    }\n\n    if (numOfLiberties === 0 && neighbors.length !== 0) {\n      checkedNeighbors.push(strRowCol);\n\n      for (let i = 0; i < neighbors.length; i++) {\n        let neighbor = neighbors[i];\n        let parsedNeighborPos = neighbor.split(\".\");\n        let neighborRow = parseInt(parsedNeighborPos[0]);\n        let neighborCol = parseInt(parsedNeighborPos[1]);\n        numOfLiberties += this.captureCheck(board, neighborRow, neighborCol, checkedNeighbors, opponentColor);\n      }\n\n      return numOfLiberties;\n    } else if (numOfLiberties === 0 && neighbors.length === 0) {\n      return 0;\n    } else {\n      return numOfLiberties;\n    }\n  }\n\n  getNewBoard(i, j) {\n    let newBoard = this.state.board.slice();\n    newBoard[i][j] = this.state.currentPlayer;\n    let rowsToRemove = [];\n    let colsToRemove = [];\n    const opponentColor = this.state.currentPlayer === 'b' ? 'w' : 'b';\n\n    for (let row = 0; row < this.boardSize; row++) {\n      for (let col = 0; col < this.boardSize; col++) {\n        const tileOccupied = newPositions[row][col] === 'w' || newPositions[row][col] === 'b';\n\n        if (this.captureCheck(newPositions, row, col, [], opponentColor) === 0 && tileOccupied) {\n          console.log(\"CAPTURE OCCURED\");\n          rowsToRemove.push(row);\n          colsToRemove.push(col);\n        }\n      }\n    }\n\n    for (let k = 0; k < rowsToRemove.length; k++) {\n      let rowToRemove = rowsToRemove[k];\n      let colToRemove = colsToRemove[k];\n      newBoard[rowToRemove][colToRemove] = 'n';\n    }\n\n    return newBoard;\n  }\n\n  makeMove(i, j) {\n    const nextPlayer = this.state.currentPlayer === 'b' ? 'w' : 'b';\n    const newPlayerTurnStatus = nextPlayer === 'b' ? \"Black's Turn!\" : \"White's Turn!\";\n    const newErrorMessage = \"\";\n    const newBoard = this.getNewBoard(i, j);\n    this.setState({\n      board: newBoard,\n      currentPlayer: nextPlayer,\n      playerTurnStatus: newPlayerTurnStatus,\n      errorMessage: newErrorMessage\n    });\n  }\n\n  isValidMove(row, col) {\n    const currentPlayerLiberties = this.captureCheck(this.state.filledPositions, row, col, [], this.state.currentPlayer);\n    console.log(\"Current Player Liberties: \" + currentPlayerLiberties);\n\n    if (this.state.filledPositions[row][col] !== \"n\") {\n      return false;\n    } else if (currentPlayerLiberties === 0) {\n      return false;\n    }\n\n    return true;\n  }\n\n  handleClick(i, j) {\n    if (this.isValidMove(i, j)) {\n      this.makeMove(i, j);\n    } else {\n      const newErrorMessage = \"Invalid Move!\";\n      this.setState({\n        errorMessage: newErrorMessage\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-board\",\n        children: /*#__PURE__*/_jsxDEV(Board, {\n          filledPositions: this.state.filledPositions,\n          onClick: (i, j) => this.handleClick(i, j)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: this.state.playerTurnStatus\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: this.state.errorMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Game\",\n      children: /*#__PURE__*/_jsxDEV(Game, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 213,\n    columnNumber: 5\n  }, this);\n}\n\n_c2 = App;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Tile\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["/Users/dylankriegman/Desktop/Go-Web-App/go-game-frontend/src/App.js"],"names":["React","Tile","props","onClick","stoneRadius","stoneFill","Board","Component","renderTile","row","col","filledPositions","render","board","boardRow","push","Game","constructor","boardSize","Array","state","currentPlayer","playerTurnStatus","errorMessage","isValidPos","captureCheck","checkedNeighbors","opponentColor","directions","numOfLiberties","neighbors","strRowCol","toString","i","length","direction","adjRow","adjCol","adjValue","strAdjPos","includes","neighbor","parsedNeighborPos","split","neighborRow","parseInt","neighborCol","getNewBoard","j","newBoard","slice","rowsToRemove","colsToRemove","tileOccupied","newPositions","console","log","k","rowToRemove","colToRemove","makeMove","nextPlayer","newPlayerTurnStatus","newErrorMessage","setState","isValidMove","currentPlayerLiberties","handleClick","App"],"mappings":"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","sourcesContent":["import React from 'react';\n\nfunction Tile(props) {\n    return (\n      <button className=\"tile\" onClick={props.onClick}>\n        <svg height=\"34\" width=\"34\">\n        <circle cx=\"17\" cy=\"17\" r={props.stoneRadius} stroke=\"black\" strokeWidth=\"1\" fill={props.stoneFill} />\n        </svg>\n\n      </button>\n    );\n}\n\n\nclass Board extends React.Component {\n  renderTile(row,col) {\n    return (\n      <Tile \n      onClick={()=>this.props.onClick(row,col)}\n      stoneRadius={this.props.filledPositions[row][col]!=='n' ? 14:0}\n      stoneFill={this.props.filledPositions[row][col]==='b' ? 'black':'white'}\n      />\n    );\n\n  }\n  render() {\n    const board=[];\n    for(let row=0;row<9;row++) {\n      const boardRow=[];\n      for(let col=0;col<9;col++) {\n        boardRow.push(this.renderTile(row,col));\n      }\n      board.push(<div className=\"board-row\">{boardRow}</div>)\n    }\n    return (\n      <div>\n        {board}\n      </div>\n    );\n  }\n}\n\n//Handles Game Logic\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.boardSize=9;\n\n    let Board=new Array(this.boardSize);\n    for(let row=0;row<this.boardSize;row++) {\n      Board[row]=new Array(this.boardSize);\n    }\n    for(let row=0;row<this.boardSize;row++) {\n      for(let col=0;col<this.boardSize;col++) {\n        Board[row][col]='n';\n      }\n    }\n    this.state={\n      currentPlayer:'b',\n      board:Board,\n      playerTurnStatus:\"Black's Turn!\",\n      errorMessage:\"\"\n    };\n\n  }\n\n\n  isValidPos(row,col) {\n    if(row>=0 && row<this.boardSize) {\n      if(col>=0 && col<this.boardSize) {\n        return true;\n      }\n    }\n    return false;\n  }\n  \n  //returns the number of liberties that a stone or group of connected stones has\n  //expects the row and col of the stone or a row col in the group  as input\n  captureCheck(board,row,col,checkedNeighbors,opponentColor) {\n    //color of the stone that could be captured \n    const directions=[[-1,0],[1,0],[0,1],[0,-1]];\n    let numOfLiberties=0;\n    let neighbors=[];\n    let strRowCol=(row.toString())+\".\"+(col.toString());\n    for(let i=0;i<directions.length;i++) {\n      let direction=directions[i];\n      let adjRow=row+direction[0];\n      let adjCol=col+direction[1];\n      if(this.isValidPos(adjRow,adjCol)) {\n        let adjValue=board[adjRow][adjCol];\n        let strAdjPos=(adjRow.toString())+\".\"+(adjCol.toString());\n        if(adjValue==='n') {\n          numOfLiberties+=1;\n        }\n        else if(adjValue===opponentColor &&  !checkedNeighbors.includes(strAdjPos)) {\n          neighbors.push(strAdjPos);\n        }\n      }\n    }\n\n    if(numOfLiberties===0 && neighbors.length!==0) {\n      checkedNeighbors.push(strRowCol);\n      for(let i=0;i<neighbors.length;i++) {\n        let neighbor=neighbors[i];\n        let parsedNeighborPos=neighbor.split(\".\");\n        let neighborRow=parseInt(parsedNeighborPos[0]);\n        let neighborCol=parseInt(parsedNeighborPos[1]);\n        numOfLiberties+=this.captureCheck(board,neighborRow,neighborCol,checkedNeighbors,opponentColor);\n      }\n      return numOfLiberties;\n    }\n    else if (numOfLiberties===0 && neighbors.length===0) {\n      return 0;\n    }\n    else {\n      return numOfLiberties;\n    }\n  }\n\n  getNewBoard(i,j) {\n    let newBoard=this.state.board.slice();\n    newBoard[i][j]=this.state.currentPlayer;\n\n    let rowsToRemove=[];\n    let colsToRemove=[];\n    const opponentColor=this.state.currentPlayer==='b' ? 'w':'b';\n    for(let row=0;row<this.boardSize;row++) {\n      for(let col=0;col<this.boardSize;col++) {\n        const tileOccupied=newPositions[row][col]==='w' || newPositions[row][col]==='b';\n        \n        if(this.captureCheck(newPositions,row,col,[],opponentColor)===0 && tileOccupied) {\n          console.log(\"CAPTURE OCCURED\");\n          rowsToRemove.push(row);\n          colsToRemove.push(col);\n        }\n      }\n    }\n    for(let k=0;k<rowsToRemove.length;k++) {\n      let rowToRemove=rowsToRemove[k];\n      let colToRemove=colsToRemove[k];\n      newBoard[rowToRemove][colToRemove]='n'\n\n    }\n    return newBoard\n\n  }\n  \n  makeMove(i,j) {\n    const nextPlayer=(this.state.currentPlayer==='b') ? 'w':'b';\n    const newPlayerTurnStatus=(nextPlayer==='b') ? \"Black's Turn!\":\"White's Turn!\";\n    const newErrorMessage=\"\";\n    const newBoard=this.getNewBoard(i,j);\n\n    this.setState({\n      board:newBoard,\n      currentPlayer:nextPlayer,\n      playerTurnStatus:newPlayerTurnStatus,\n      errorMessage:newErrorMessage,\n    });\n  }\n\n  isValidMove(row,col) {\n    const currentPlayerLiberties=this.captureCheck(this.state.filledPositions,row,col,[],this.state.currentPlayer);\n    console.log(\"Current Player Liberties: \" + currentPlayerLiberties);\n    if(this.state.filledPositions[row][col]!==\"n\") {\n      return false;\n    }\n\n    else if(currentPlayerLiberties===0) {\n      return false;\n    }\n    return true;\n  }\n\n  handleClick(i,j) {\n    if(this.isValidMove(i,j)) {\n      this.makeMove(i,j);\n    }\n    else {\n      const newErrorMessage=\"Invalid Move!\";\n      this.setState({errorMessage:newErrorMessage});\n    }\n  }\n\n\n  render() {\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n          filledPositions={this.state.filledPositions}\n          onClick={(i,j)=>this.handleClick(i,j)}\n          />\n        </div>\n        <div className=\"game-info\">\n          <h3>\n            {this.state.playerTurnStatus}\n          </h3>\n          <h3>\n            {this.state.errorMessage}\n          </h3>\n        </div>\n      </div>\n    );\n  }\n\n\n}\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"Game\">\n        <Game />\n      </div>\n    </div>\n  );\n}\n\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}