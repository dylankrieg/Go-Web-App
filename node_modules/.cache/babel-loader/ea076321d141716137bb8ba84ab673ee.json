{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/dylankriegman/Desktop/Go-Web-App/go-game-frontend/src/App.js\";\nimport './App.css';\nimport React from 'react';\n\nfunction Tile(props) {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"tile\",\n    onClick: props.onClick,\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      height: \"34\",\n      width: \"34\",\n      children: /*#__PURE__*/_jsxDEV(\"circle\", {\n        cx: \"17\",\n        cy: \"17\",\n        r: props.stoneRadius,\n        stroke: \"black\",\n        strokeWidth: \"1\",\n        fill: props.stoneFill\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 7\n  }, this);\n}\n\n_c = Tile;\n\nclass Board extends React.Component {\n  renderTile(row, col) {\n    return /*#__PURE__*/_jsxDEV(Tile, {\n      position: \"[\" + row.toString() + \",\" + col.toString() + \"]\",\n      onClick: () => this.props.onClick(row, col),\n      stoneRadius: this.props.filledPositions[row][col] !== 'n' ? 14 : 0,\n      stoneFill: this.props.filledPositions[row][col] === 'b' ? 'black' : 'white'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this);\n  }\n\n  render() {\n    const board = [];\n\n    for (let row = 0; row < 9; row++) {\n      const boardRow = [];\n\n      for (let col = 0; col < 9; col++) {\n        boardRow.push(this.renderTile(row, col));\n      }\n\n      board.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-row\",\n        children: boardRow\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 18\n      }, this));\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: board\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this);\n  }\n\n} //Handles Game Logic\n\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.boardSize = 9;\n    let FilledPositions = new Array(this.boardSize);\n\n    for (let row = 0; row < this.boardSize; row++) {\n      FilledPositions[row] = new Array(this.boardSize);\n    }\n\n    for (let row = 0; row < this.boardSize; row++) {\n      for (let col = 0; col < this.boardSize; col++) {\n        FilledPositions[row][col] = 'n';\n      }\n    }\n\n    this.state = {\n      playerTurn: 'b',\n      filledPositions: FilledPositions,\n      playerTurnStatus: \"Black's Turn!\",\n      errorMessage: \"\"\n    };\n  }\n\n  isValidPos(row, col) {\n    if (row >= 0 && row < this.boardSize) {\n      if (col >= 0 && col < this.boardSize) {\n        return true;\n      }\n    }\n\n    return false;\n  } //returns the number of liberties that a stone or group of connected stones has\n  //expects the row and col of the stone or a row col in the group  as input\n\n\n  captureCheck(board, row, col, checkedNeighbors) {\n    //color of the stone that could be captured \n    const playerColor = board[row][col];\n    const directions = [[-1, 0], [1, 0], [0, 1], [0, -1]];\n    let numOfLiberties = 0;\n    let neighbors = [];\n    let strRowCol = row.toString() + \".\" + col.toString();\n\n    for (let i = 0; i < directions.length; i++) {\n      let direction = directions[i];\n      let adjRow = row + direction[0];\n      let adjCol = col + direction[1];\n\n      if (this.isValidPos(adjRow, adjCol)) {\n        let adjValue = board[adjRow][adjCol];\n        let strAdjPos = adjRow.toString() + \".\" + adjCol.toString();\n\n        if (adjValue === 'n') {\n          numOfLiberties += 1;\n        } else if (adjValue === 'b' && !checkedNeighbors.includes(strAdjPos)) {\n          neighbors.push(strAdjPos);\n        }\n      }\n    }\n\n    if (numOfLiberties === 0 && neighbors.length !== 0) {\n      checkedNeighbors.push(strRowCol);\n\n      for (let i = 0; i < neighbors.length; i++) {\n        let neighbor = neighbors[i];\n        let parsedNeighborPos = neighbor.split(\".\");\n        let neighborRow = parseInt(parsedNeighborPos[0]);\n        let neighborCol = parseInt(parsedNeighborPos[1]);\n        numOfLiberties += this.captureCheck(board, neighborRow, neighborCol, checkedNeighbors);\n      }\n\n      return numOfLiberties;\n    } else if (numOfLiberties === 0 && neighbors.length === 0) {\n      return 0;\n    } //numOfLiberties!=0\n    else {\n        return numOfLiberties;\n      }\n  } //Modifies the board based on whether any stones\n  //have been captured\n  //places a new stone at (i,j)\n\n\n  getNewBoard(i, j) {\n    let newPositions = this.state.filledPositions.slice(); //1st the new stone is placed at [i,j] always\n\n    newPositions[i][j] = this.state.playerTurn; //then captued stones are removed from the board\n\n    let rowsToRemove = [];\n    let colsToRemove = []; //Checking if adjacent stones have been captued\n    //efficiency increase\n\n    const directions = [[-1, 0], [1, 0], [0, 1], [0, -1]];\n\n    for (let i = 0; i < directions.length; i++) {\n      const checkRow = i + directions[i][0];\n      const checkCol = j + directions[i][1];\n\n      if (this.isValidPos(checkRow, checkCol)) {\n        const tileOccupied = newPositions[checkRow][checkCol] === 'w' || newPositions[checkRow][checkCol] === 'b';\n\n        if (this.captureCheck(newPositions, checkRow, checkCol, []) === 0 && tileOccupied) {\n          rowsToRemove.push(checkRow);\n          colsToRemove.push(checkCol);\n        }\n      }\n    }\n\n    for (let k = 0; k < rowsToRemove.length; k++) {\n      let rowToRemove = rowsToRemove[k];\n      let colToRemove = colsToRemove[k];\n      newPositions[rowToRemove][colToRemove] = 'n';\n    }\n\n    return newPositions;\n  }\n\n  makeMove(i, j) {\n    const newPlayerTurn = this.state.playerTurn === 'b' ? 'w' : 'b';\n    const newPlayerTurnStatus = newPlayerTurn === 'b' ? \"Black's Turn!\" : \"White's Turn!\";\n    const newErrorMessage = \"\";\n    const newBoard = this.getNewBoard(i, j);\n    console.log(\"---------\");\n\n    for (let i = 0; i < newBoard.length; i++) {\n      console.log(newBoard[i]);\n    }\n\n    console.log(\"---------\");\n    this.setState({\n      filledPositions: newBoard,\n      playerTurn: newPlayerTurn,\n      playerTurnStatus: newPlayerTurnStatus,\n      errorMessage: newErrorMessage\n    });\n  }\n\n  isValidMove(row, col, player) {\n    if (this.state.filledPositions[row][col] !== 'n') {\n      return false;\n    }\n\n    return true;\n  }\n\n  handleClick(i, j) {\n    if (this.isValidMove(i, j)) {\n      this.makeMove(i, j);\n    } else {\n      const newErrorMessage = \"Invalid Move!\";\n      this.setState({\n        errorMessage: newErrorMessage\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-board\",\n        children: /*#__PURE__*/_jsxDEV(Board, {\n          filledPositions: this.state.filledPositions,\n          onClick: (i, j) => this.handleClick(i, j)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: this.state.playerTurnStatus\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: this.state.errorMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Game\",\n      children: /*#__PURE__*/_jsxDEV(Game, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 228,\n    columnNumber: 5\n  }, this);\n}\n\n_c2 = App;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Tile\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["/Users/dylankriegman/Desktop/Go-Web-App/go-game-frontend/src/App.js"],"names":["React","Tile","props","onClick","stoneRadius","stoneFill","Board","Component","renderTile","row","col","toString","filledPositions","render","board","boardRow","push","Game","constructor","boardSize","FilledPositions","Array","state","playerTurn","playerTurnStatus","errorMessage","isValidPos","captureCheck","checkedNeighbors","playerColor","directions","numOfLiberties","neighbors","strRowCol","i","length","direction","adjRow","adjCol","adjValue","strAdjPos","includes","neighbor","parsedNeighborPos","split","neighborRow","parseInt","neighborCol","getNewBoard","j","newPositions","slice","rowsToRemove","colsToRemove","checkRow","checkCol","tileOccupied","k","rowToRemove","colToRemove","makeMove","newPlayerTurn","newPlayerTurnStatus","newErrorMessage","newBoard","console","log","setState","isValidMove","player","handleClick","App"],"mappings":"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","sourcesContent":["import './App.css';\nimport React from 'react';\n\n\nfunction Tile(props) {\n    return (\n      <button className=\"tile\" onClick={props.onClick}>\n        <svg height=\"34\" width=\"34\">\n        <circle cx=\"17\" cy=\"17\" r={props.stoneRadius} stroke=\"black\" strokeWidth=\"1\" fill={props.stoneFill} />\n        </svg>\n\n      </button>\n    );\n}\n\n\nclass Board extends React.Component {\n  renderTile(row,col) {\n    return (\n      <Tile \n      position={\"[\" + row.toString() + \",\" + col.toString() + \"]\"}\n      onClick={()=>this.props.onClick(row,col)}\n      stoneRadius={this.props.filledPositions[row][col]!=='n' ? 14:0}\n      stoneFill={this.props.filledPositions[row][col]==='b' ? 'black':'white'}\n      />\n    );\n\n  }\n  render() {\n    const board=[];\n    for(let row=0;row<9;row++) {\n      const boardRow=[];\n      for(let col=0;col<9;col++) {\n        boardRow.push(this.renderTile(row,col));\n      }\n      board.push(<div className=\"board-row\">{boardRow}</div>)\n    }\n    return (\n      <div>\n        {board}\n      </div>\n    );\n  }\n}\n\n//Handles Game Logic\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.boardSize=9;\n\n    let FilledPositions=new Array(this.boardSize);\n    for(let row=0;row<this.boardSize;row++) {\n      FilledPositions[row]=new Array(this.boardSize);\n    }\n    for(let row=0;row<this.boardSize;row++) {\n      for(let col=0;col<this.boardSize;col++) {\n        FilledPositions[row][col]='n';\n      }\n    }\n\n    this.state={\n      playerTurn:'b',\n      filledPositions:FilledPositions,\n      playerTurnStatus:\"Black's Turn!\",\n      errorMessage:\"\"\n    };\n\n  }\n\n\n  isValidPos(row,col) {\n    if(row>=0 && row<this.boardSize) {\n      if(col>=0 && col<this.boardSize) {\n        return true;\n      }\n    }\n    return false;\n  }\n  \n  //returns the number of liberties that a stone or group of connected stones has\n  //expects the row and col of the stone or a row col in the group  as input\n  captureCheck(board,row,col,checkedNeighbors) {\n    //color of the stone that could be captured \n    const playerColor=board[row][col];\n    const directions=[[-1,0],[1,0],[0,1],[0,-1]];\n    let numOfLiberties=0;\n    let neighbors=[];\n    let strRowCol=(row.toString())+\".\"+(col.toString());\n    for(let i=0;i<directions.length;i++) {\n      let direction=directions[i];\n      let adjRow=row+direction[0];\n      let adjCol=col+direction[1];\n      if(this.isValidPos(adjRow,adjCol)) {\n        let adjValue=board[adjRow][adjCol];\n        let strAdjPos=(adjRow.toString())+\".\"+(adjCol.toString());\n        if(adjValue==='n') {\n          numOfLiberties+=1;\n        }\n        else if(adjValue==='b' &&  !checkedNeighbors.includes(strAdjPos)) {\n          neighbors.push(strAdjPos);\n        }\n      }\n    }\n\n    if(numOfLiberties===0 && neighbors.length!==0) {\n      checkedNeighbors.push(strRowCol);\n      for(let i=0;i<neighbors.length;i++) {\n        let neighbor=neighbors[i];\n        let parsedNeighborPos=neighbor.split(\".\");\n        let neighborRow=parseInt(parsedNeighborPos[0]);\n        let neighborCol=parseInt(parsedNeighborPos[1]);\n        numOfLiberties+=this.captureCheck(board,neighborRow,neighborCol,checkedNeighbors);\n      }\n      return numOfLiberties;\n    }\n    else if (numOfLiberties===0 && neighbors.length===0) {\n      return 0;\n    }\n    //numOfLiberties!=0\n    else {\n      return numOfLiberties;\n    }\n  }\n\n  //Modifies the board based on whether any stones\n  //have been captured\n  //places a new stone at (i,j)\n  getNewBoard(i,j) {\n    let newPositions=this.state.filledPositions.slice();\n    //1st the new stone is placed at [i,j] always\n    newPositions[i][j]=this.state.playerTurn;\n\n    //then captued stones are removed from the board\n    let rowsToRemove=[];\n    let colsToRemove=[];\n\n    //Checking if adjacent stones have been captued\n    //efficiency increase\n    const directions=[[-1,0],[1,0],[0,1],[0,-1]];\n    for(let i=0;i<directions.length;i++) {\n      const checkRow=i+directions[i][0];\n      const checkCol=j+directions[i][1];\n      if(this.isValidPos(checkRow,checkCol)) {\n        const tileOccupied=newPositions[checkRow][checkCol]==='w' || newPositions[checkRow][checkCol]==='b';\n        if(this.captureCheck(newPositions,checkRow,checkCol,[])===0 && tileOccupied) {\n          rowsToRemove.push(checkRow);\n          colsToRemove.push(checkCol);\n        }\n      }\n    }\n    for(let k=0;k<rowsToRemove.length;k++) {\n      let rowToRemove=rowsToRemove[k];\n      let colToRemove=colsToRemove[k];\n      newPositions[rowToRemove][colToRemove]='n'\n\n    }\n    return newPositions\n\n  }\n  \n  makeMove(i,j) {\n    const newPlayerTurn=(this.state.playerTurn==='b') ? 'w':'b';\n    const newPlayerTurnStatus=(newPlayerTurn==='b') ? \"Black's Turn!\":\"White's Turn!\";\n    const newErrorMessage=\"\";\n    const newBoard=this.getNewBoard(i,j);\n    console.log(\"---------\");\n    for(let i=0;i<newBoard.length;i++) {\n      console.log(newBoard[i]);\n    }\n    console.log(\"---------\");\n\n\n    this.setState({\n      filledPositions:newBoard,\n      playerTurn:newPlayerTurn,\n      playerTurnStatus:newPlayerTurnStatus,\n      errorMessage:newErrorMessage,\n    });\n  }\n\n  isValidMove(row,col,player) {\n    if(this.state.filledPositions[row][col]!=='n') {\n      return false;\n    }\n    return true;\n\n  }\n\n  handleClick(i,j) {\n    if(this.isValidMove(i,j)) {\n      this.makeMove(i,j);\n    }\n    else {\n      const newErrorMessage=\"Invalid Move!\";\n      this.setState({errorMessage:newErrorMessage});\n    }\n  }\n\n\n  render() {\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n          filledPositions={this.state.filledPositions}\n          onClick={(i,j)=>this.handleClick(i,j)}\n          />\n        </div>\n        <div className=\"game-info\">\n          <h3>\n            {this.state.playerTurnStatus}\n          </h3>\n          <h3>\n            {this.state.errorMessage}\n          </h3>\n        </div>\n      </div>\n    );\n  }\n\n\n}\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"Game\">\n        <Game />\n      </div>\n    </div>\n  );\n}\n\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}