{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/dylankriegman/Desktop/Go-Web-App-V2/go-game-frontend/src/App.js\";\nimport React from 'react';\n\nfunction Tile(props) {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"tile\",\n    onClick: props.onClick,\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      height: \"34\",\n      width: \"34\",\n      children: /*#__PURE__*/_jsxDEV(\"circle\", {\n        cx: \"17\",\n        cy: \"17\",\n        r: props.stoneRadius,\n        stroke: \"black\",\n        strokeWidth: \"1\",\n        fill: props.stoneFill\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 7,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 7\n  }, this);\n}\n\n_c = Tile;\n\nclass Board extends React.Component {\n  renderTile(row, col) {\n    return /*#__PURE__*/_jsxDEV(Tile, {\n      id: \"blah\",\n      onClick: () => this.props.onClick(row, col),\n      stoneRadius: this.props.board[row][col] !== 'n' ? 14 : 0,\n      stoneFill: this.props.board[row][col] === 'b' ? 'black' : 'white'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this);\n  }\n\n  render() {\n    const board = [];\n\n    for (let row = 0; row < this.props.boardSize; row++) {\n      const boardRow = [];\n\n      for (let col = 0; col < this.props.boardSize; col++) {\n        boardRow.push(this.renderTile(row, col));\n      }\n\n      board.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-row\",\n        children: boardRow\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 18\n      }, this));\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: board\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this);\n  }\n\n} //Handles Game Logic\n\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.boardSize = 9;\n    let Board = new Array(this.boardSize);\n\n    for (let row = 0; row < this.boardSize; row++) {\n      Board[row] = new Array(this.boardSize);\n    }\n\n    for (let row = 0; row < this.boardSize; row++) {\n      for (let col = 0; col < this.boardSize; col++) {\n        Board[row][col] = 'n';\n      }\n    }\n\n    this.state = {\n      currentPlayer: 'b',\n      board: Board,\n      boardSize: this.boardSize,\n      playerTurnStatus: \"Black's Turn!\",\n      errorMessage: \"\"\n    };\n  }\n\n  isValidPos(row, col) {\n    if (row >= 0 && row < this.boardSize) {\n      if (col >= 0 && col < this.boardSize) {\n        return true;\n      }\n    }\n\n    return false;\n  } //returns the number of liberties that a stone or group of connected stones has\n  //expects the row and col of the stone or a row col in the group as input\n\n\n  captureHelper(board, row, col, checkedNeighbors) {\n    console.log(typeof checkedNeighbors);\n    const playerColor = board[row][col];\n    const directions = [[-1, 0], [1, 0], [0, 1], [0, -1]];\n    let numOfLiberties = 0;\n    let neighbors = [];\n    const strRowCol = row.toString() + \".\" + col.toString();\n\n    for (let i = 0; i < directions.length; i++) {\n      const direction = directions[i];\n      const adjRow = row + direction[0];\n      const adjCol = col + direction[1];\n\n      if (this.isValidPos(adjRow, adjCol)) {\n        const adjValue = board[adjRow][adjCol];\n        const strAdjPos = adjRow.toString() + \".\" + adjCol.toString();\n\n        if (adjValue === 'n') {\n          numOfLiberties += 1;\n        } else if (adjValue === playerColor && !checkedNeighbors.has(strAdjPos)) {\n          neighbors.push(strAdjPos);\n        }\n      }\n    }\n\n    if (numOfLiberties === 0 && neighbors.length !== 0) {\n      checkedNeighbors.add(strRowCol);\n\n      for (let i = 0; i < neighbors.length; i++) {\n        const neighbor = neighbors[i];\n        const parsedNeighborPos = neighbor.split(\".\");\n        const neighborRow = parseInt(parsedNeighborPos[0]);\n        const neighborCol = parseInt(parsedNeighborPos[1]);\n        numOfLiberties += this.captureHelper(board, neighborRow, neighborCol, checkedNeighbors);\n      }\n\n      return numOfLiberties;\n    } else if (numOfLiberties === 0 && neighbors.length === 0) {\n      return 0;\n    } else {\n      return numOfLiberties;\n    }\n  } //Iterates through the board and checks if any of the opponents stones\n  //have been captured\n  //Returns a list of coordinates of captured stones\n\n\n  getCapturedOpponents(board) {\n    let capturedOpponents = [];\n    const opponentColor = this.state.currentPlayer === 'b' ? 'w' : 'b';\n\n    for (let i = 0; i < this.state.boardSize; i++) {\n      for (let j = 0; j < this.state.boardSize; j++) {\n        const isEmpty = board[i][j] === 'n';\n\n        if (!isEmpty && board[i][j] === opponentColor) {\n          const numberOfLiberties = this.captureHelper(board, i, j, new Set());\n\n          if (numberOfLiberties === 0) {\n            capturedOpponents.push([i, j]);\n          }\n        }\n      }\n    }\n\n    return capturedOpponents;\n  } //run move procedure\n  //returns error and new board\n\n\n  runMoveProcedure(board, i, j) {\n    let errorMessage = \"\"; //if the tile is occupied\n\n    if (board[i][j] !== 'n') {\n      errorMessage = 'Invalid Move!';\n      return [board, errorMessage];\n    } //places the current players stone at (i,j)\n\n\n    board[i][j] = this.state.currentPlayer; //checks if any stones were captured\n\n    const capturedOpponents = this.getCapturedOpponents(board); //if no stones were captured check the following 2 cases\n\n    if (capturedOpponents.length === 0) {\n      //Finding out how many liberties the group at (i,j) has\n      const numLiberties = this.captureHelper(board, i, j, new Set()); //Case 1 (the stone or group placed has liberties)\n\n      if (numLiberties === 0) {\n        //Remove the current player's stone from (i,j)\n        //And display invalid move message\n        //should return error message of some kind\n        board[i][j] = 'n';\n        errorMessage = \"Invalid Move!\";\n        return [board, errorMessage];\n      } //Case 2 (the stone or group placed has no liberties)\n      else {\n          return [board, errorMessage];\n        }\n    } //If stones were captured\n    else {\n        //Remove the captured stones from the board\n        for (let k = 0; k < capturedOpponents.length; k++) {\n          const capturedPos = capturedOpponents[k];\n          const capturedRow = capturedPos[0];\n          const capturedCol = capturedPos[1];\n          board[capturedRow][capturedCol] = \"n\";\n        }\n\n        return [board, errorMessage];\n      }\n  }\n\n  makeMove(i, j) {\n    let moveOutput = this.runMoveProcedure(this.state.board.slice(), i, j);\n    let newBoard = moveOutput[0];\n    let newErrorMessage = moveOutput[1];\n    let newPlayerTurnStatus = this.state.playerTurnStatus;\n    let nextPlayer = this.state.currentPlayer; //The move was successful\n\n    if (newErrorMessage === '') {\n      nextPlayer = this.state.currentPlayer === 'b' ? 'w' : 'b';\n      newPlayerTurnStatus = nextPlayer === 'b' ? \"Black's Turn!\" : \"White's Turn!\";\n    }\n\n    this.setState({\n      board: newBoard,\n      currentPlayer: nextPlayer,\n      playerTurnStatus: newPlayerTurnStatus,\n      errorMessage: newErrorMessage\n    });\n  }\n\n  handleClick(i, j) {\n    this.makeMove(i, j);\n  }\n\n  render() {\n    var square = document.getElementById(\"tile\");\n\n    if (this.state.currentPlayer === 'b') {\n      square.style.backgroundColor = \"black\";\n    } else {\n      square.style.backgroundColor = \"red\";\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-board\",\n        children: /*#__PURE__*/_jsxDEV(Board, {\n          board: this.state.board,\n          boardSize: this.state.boardSize,\n          onClick: (i, j) => this.handleClick(i, j)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: this.state.playerTurnStatus\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: this.state.errorMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Game\",\n      children: /*#__PURE__*/_jsxDEV(Game, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 266,\n    columnNumber: 5\n  }, this);\n}\n\n_c2 = App;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Tile\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["/Users/dylankriegman/Desktop/Go-Web-App-V2/go-game-frontend/src/App.js"],"names":["React","Tile","props","onClick","stoneRadius","stoneFill","Board","Component","renderTile","row","col","board","render","boardSize","boardRow","push","Game","constructor","Array","state","currentPlayer","playerTurnStatus","errorMessage","isValidPos","captureHelper","checkedNeighbors","console","log","playerColor","directions","numOfLiberties","neighbors","strRowCol","toString","i","length","direction","adjRow","adjCol","adjValue","strAdjPos","has","add","neighbor","parsedNeighborPos","split","neighborRow","parseInt","neighborCol","getCapturedOpponents","capturedOpponents","opponentColor","j","isEmpty","numberOfLiberties","Set","runMoveProcedure","numLiberties","k","capturedPos","capturedRow","capturedCol","makeMove","moveOutput","slice","newBoard","newErrorMessage","newPlayerTurnStatus","nextPlayer","setState","handleClick","square","document","getElementById","style","backgroundColor","App"],"mappings":"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","sourcesContent":["import React from 'react';\n\nfunction Tile(props) {\n    return (\n      <button className=\"tile\" onClick={props.onClick} >\n        <svg height=\"34\" width=\"34\">\n        <circle cx=\"17\" cy=\"17\" r={props.stoneRadius} stroke=\"black\" strokeWidth=\"1\" fill={props.stoneFill} />\n        </svg>\n\n      </button>\n    );\n}\n\n\nclass Board extends React.Component {\n  renderTile(row,col) {\n    return (\n      <Tile id=\"blah\"\n      onClick={()=>this.props.onClick(row,col)}\n      stoneRadius={this.props.board[row][col]!=='n' ? 14:0}\n      stoneFill={this.props.board[row][col]==='b' ? 'black':'white'}\n      />\n    );\n\n  }\n  render() {\n    const board=[];\n    for(let row=0;row<this.props.boardSize;row++) {\n      const boardRow=[];\n      for(let col=0;col<this.props.boardSize;col++) {\n        boardRow.push(this.renderTile(row,col));\n      }\n      board.push(<div className=\"board-row\">{boardRow}</div>)\n    }\n    return (\n      <div>\n        {board}\n      </div>\n    );\n  }\n}\n\n//Handles Game Logic\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.boardSize=9;\n\n    let Board=new Array(this.boardSize);\n    for(let row=0;row<this.boardSize;row++) {\n      Board[row]=new Array(this.boardSize);\n    }\n    for(let row=0;row<this.boardSize;row++) {\n      for(let col=0;col<this.boardSize;col++) {\n        Board[row][col]='n';\n      }\n    }\n    this.state={\n      currentPlayer:'b',\n      board:Board,\n      boardSize:this.boardSize,\n      playerTurnStatus:\"Black's Turn!\",\n      errorMessage:\"\"\n    };\n  }\n\n\n  isValidPos(row,col) {\n    if(row>=0 && row<this.boardSize) {\n      if(col>=0 && col<this.boardSize) {\n        return true;\n      }\n    }\n    return false;\n  }\n  \n  //returns the number of liberties that a stone or group of connected stones has\n  //expects the row and col of the stone or a row col in the group as input\n  captureHelper(board,row,col,checkedNeighbors) {\n    console.log(typeof(checkedNeighbors));\n    const playerColor=board[row][col]\n    const directions=[[-1,0],[1,0],[0,1],[0,-1]];\n    let numOfLiberties=0;\n    let neighbors=[];\n    const strRowCol=(row.toString())+\".\"+(col.toString());\n    for(let i=0;i<directions.length;i++) {\n      const direction=directions[i];\n      const adjRow=row+direction[0];\n      const adjCol=col+direction[1];\n      \n      if(this.isValidPos(adjRow,adjCol)) {\n        const adjValue=board[adjRow][adjCol];\n        const strAdjPos=(adjRow.toString())+\".\"+(adjCol.toString());\n        if(adjValue==='n') {\n          numOfLiberties+=1;\n        }\n        else if(adjValue===playerColor &&  !checkedNeighbors.has(strAdjPos)) {\n          neighbors.push(strAdjPos);\n        }\n      }\n    }\n\n    if(numOfLiberties===0 && neighbors.length!==0) {\n      checkedNeighbors.add(strRowCol);\n      for(let i=0;i<neighbors.length;i++) {\n        const neighbor=neighbors[i];\n        const parsedNeighborPos=neighbor.split(\".\");\n        const neighborRow=parseInt(parsedNeighborPos[0]);\n        const neighborCol=parseInt(parsedNeighborPos[1]);\n        numOfLiberties+=this.captureHelper(board,neighborRow,neighborCol,checkedNeighbors);\n      }\n      return numOfLiberties;\n    }\n    else if (numOfLiberties===0 && neighbors.length===0) {\n      return 0;\n    }\n    else {\n      return numOfLiberties;\n    }\n  }\n\n  \n  //Iterates through the board and checks if any of the opponents stones\n  //have been captured\n  //Returns a list of coordinates of captured stones\n  getCapturedOpponents(board) {\n    let capturedOpponents=[]\n    const opponentColor=this.state.currentPlayer==='b' ? 'w':'b';\n    for(let i=0;i<this.state.boardSize;i++) {\n      for(let j=0;j<this.state.boardSize;j++) {\n        const isEmpty=board[i][j]==='n';\n        if(!isEmpty && board[i][j]===opponentColor) {\n          const numberOfLiberties=this.captureHelper(board,i,j,new Set());\n          if(numberOfLiberties===0) {\n            capturedOpponents.push([i,j]);\n          }\n        }\n      }\n    }\n    return capturedOpponents;\n  }\n\n\n  //run move procedure\n  //returns error and new board\n  runMoveProcedure(board,i,j) {\n    let errorMessage=\"\";\n\n    //if the tile is occupied\n    if(board[i][j]!=='n') {\n      errorMessage='Invalid Move!';\n      return [board,errorMessage];\n    }\n\n    //places the current players stone at (i,j)\n    board[i][j]=this.state.currentPlayer;\n    \n\n\n    //checks if any stones were captured\n    const capturedOpponents=this.getCapturedOpponents(board);\n    //if no stones were captured check the following 2 cases\n    if(capturedOpponents.length===0) {\n      //Finding out how many liberties the group at (i,j) has\n\n      const numLiberties=this.captureHelper(board,i,j,new Set());\n\n      //Case 1 (the stone or group placed has liberties)\n      if(numLiberties===0) {\n        //Remove the current player's stone from (i,j)\n        //And display invalid move message\n        //should return error message of some kind\n        board[i][j]='n'\n        errorMessage=\"Invalid Move!\"\n        return [board,errorMessage];\n      }\n      //Case 2 (the stone or group placed has no liberties)\n      else {\n        return [board,errorMessage];\n      }\n    }\n\n    //If stones were captured\n    else {\n      //Remove the captured stones from the board\n      for(let k=0;k<capturedOpponents.length;k++) {\n        const capturedPos=capturedOpponents[k];\n        const capturedRow=capturedPos[0];\n        const capturedCol=capturedPos[1];\n        board[capturedRow][capturedCol]=\"n\"\n      }\n      return [board,errorMessage];\n    }\n  }\n\n\n\n  makeMove(i,j) {\n\n    let moveOutput=this.runMoveProcedure(this.state.board.slice(),i,j);\n    let newBoard=moveOutput[0];\n    let newErrorMessage=moveOutput[1];\n\n    let newPlayerTurnStatus=this.state.playerTurnStatus;\n    let nextPlayer=this.state.currentPlayer;\n\n    //The move was successful\n    if(newErrorMessage==='') {\n      nextPlayer=(this.state.currentPlayer==='b') ? 'w':'b';\n      newPlayerTurnStatus=(nextPlayer==='b') ? \"Black's Turn!\":\"White's Turn!\";\n    }\n    this.setState({\n      board:newBoard,\n      currentPlayer:nextPlayer,\n      playerTurnStatus:newPlayerTurnStatus,\n      errorMessage:newErrorMessage,\n    });\n    \n  }\n\n  handleClick(i,j) {\n    this.makeMove(i,j);\n  }\n\n\n  render() {\n    var square = document.getElementById(\"tile\");\n    if(this.state.currentPlayer==='b') {\n      square.style.backgroundColor=\"black\";\n    }\n    else {\n      square.style.backgroundColor=\"red\";\n    }\n    \n    \n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n          board={this.state.board}\n          boardSize={this.state.boardSize}\n          onClick={(i,j)=>this.handleClick(i,j)}\n          >\n          </Board>\n        </div>\n        <div className=\"game-info\">\n          <h3>\n            {this.state.playerTurnStatus}\n          </h3>\n          <h3>\n            {this.state.errorMessage}\n          </h3>\n        </div>\n      </div>\n    );\n    \n  }\n}\n\n\nfunction App() {\n\n\n  return (\n    <div className=\"App\">\n      <div className=\"Game\">\n        <Game />\n      </div>\n    </div>\n  );\n}\n\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}