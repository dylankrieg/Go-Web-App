{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/dylankriegman/Desktop/Go-Web-App-V2/go-game-frontend/src/App.js\";\nimport { number } from 'prop-types';\nimport React from 'react';\n\nfunction Tile(props) {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"tile\",\n    onClick: props.onClick,\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      height: \"34\",\n      width: \"34\",\n      children: /*#__PURE__*/_jsxDEV(\"circle\", {\n        cx: \"17\",\n        cy: \"17\",\n        r: props.stoneRadius,\n        stroke: \"black\",\n        strokeWidth: \"1\",\n        fill: props.stoneFill\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 7\n  }, this);\n}\n\n_c = Tile;\n\nclass Board extends React.Component {\n  renderTile(row, col) {\n    return /*#__PURE__*/_jsxDEV(Tile, {\n      onClick: () => this.props.onClick(row, col),\n      stoneRadius: this.props.board[row][col] !== 'n' ? 14 : 0,\n      stoneFill: this.props.board[row][col] === 'b' ? 'black' : 'white'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this);\n  }\n\n  render() {\n    const board = [];\n\n    for (let row = 0; row < this.props.boardSize; row++) {\n      const boardRow = [];\n\n      for (let col = 0; col < this.props.boardSize; col++) {\n        boardRow.push(this.renderTile(row, col));\n      }\n\n      board.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-row\",\n        children: boardRow\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 18\n      }, this));\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: board\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this);\n  }\n\n} //Handles Game Logic\n\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.boardSize = 9;\n    let Board = new Array(this.boardSize);\n\n    for (let row = 0; row < this.boardSize; row++) {\n      Board[row] = new Array(this.boardSize);\n    }\n\n    for (let row = 0; row < this.boardSize; row++) {\n      for (let col = 0; col < this.boardSize; col++) {\n        Board[row][col] = 'n';\n      }\n    }\n\n    this.state = {\n      currentPlayer: 'b',\n      board: Board,\n      boardSize: this.boardSize,\n      playerTurnStatus: \"Black's Turn!\",\n      errorMessage: \"\"\n    };\n  }\n\n  isValidPos(row, col) {\n    if (row >= 0 && row < this.boardSize) {\n      if (col >= 0 && col < this.boardSize) {\n        return true;\n      }\n    }\n\n    return false;\n  } //returns the number of liberties that a stone or group of connected stones has\n  //expects the row and col of the stone or a row col in the group  as input\n\n\n  captureHelper(board, row, col, checkedNeighbors) {\n    const color = board[row][col];\n    const directions = [[-1, 0], [1, 0], [0, 1], [0, -1]];\n    let numOfLiberties = 0;\n    let neighbors = [];\n    let strRowCol = row.toString() + \".\" + col.toString();\n\n    for (let i = 0; i < directions.length; i++) {\n      let direction = directions[i];\n      let adjRow = row + direction[0];\n      let adjCol = col + direction[1];\n\n      if (this.isValidPos(adjRow, adjCol)) {\n        let adjValue = board[adjRow][adjCol];\n        let strAdjPos = adjRow.toString() + \".\" + adjCol.toString();\n\n        if (adjValue === 'n') {\n          numOfLiberties += 1;\n        } //removed else if(adjValue===opponentColor\n        else if (adjValue === color && !checkedNeighbors.includes(strAdjPos)) {\n            neighbors.push(strAdjPos);\n          }\n      }\n    }\n\n    if (numOfLiberties === 0 && neighbors.length !== 0) {\n      checkedNeighbors.push(strRowCol);\n\n      for (let i = 0; i < neighbors.length; i++) {\n        let neighbor = neighbors[i];\n        let parsedNeighborPos = neighbor.split(\".\");\n        let neighborRow = parseInt(parsedNeighborPos[0]);\n        let neighborCol = parseInt(parsedNeighborPos[1]);\n        numOfLiberties += this.captureCheck(board, neighborRow, neighborCol, checkedNeighbors);\n      }\n\n      return numOfLiberties;\n    } else if (numOfLiberties === 0 && neighbors.length === 0) {\n      return 0;\n    } else {\n      return numOfLiberties;\n    }\n  } //Iterates through the board and checks if any of the opponents stones\n  //have been captured\n  //Returns a list of coordinates of captured stones\n\n\n  getCapturedOpponents(board) {\n    let capturedOpponents = [];\n\n    for (let i = 0; i < this.state.boardSize; i++) {\n      for (let j = 0; j < this.state.boardSize; j++) {\n        const opponentColor = this.state.currentPlayer === 'b' ? 'w' : 'b';\n        const hasLiberties = this.captureHelper(board, i, j, []) === 0;\n        const isEmpty = board[i][j] === 'n';\n\n        if (!isEmpty && board[i][j] === opponentColor) {\n          const numberOfLiberties = this.captureHelper(board, i, j, []);\n\n          if (numberOfLiberties === 0) {\n            capturedOpponents.append([i, j]);\n          }\n        }\n      }\n    }\n\n    return capturedOpponents;\n  } //run move procedure\n\n\n  runMoveProcedure(board, i, j) {\n    //places the current players stone at (i,j)\n    board[i][j] = this.state.currentPlayer; //checks if any stones were captured\n\n    const capturedOpponents = this.getCapturedOpponents(board);\n    console.log(capturedOpponents); //if no stones were captured check the following 2 cases\n\n    if (capturedOpponents.length === 0) {\n      //Finding out how many liberties the group at (i,j) has\n      const numLiberties = this.captureHelper(board, i, j, []); //Case 1 (the stone or group placed has liberties)\n\n      if (numLiberties === 0) {\n        //Remove the current player's stone from (i,j)\n        //And display invalid move message\n        board[i][j] = 'n';\n        return -1;\n      } //Case 2 (the stone or group placed has no liberties)\n      else {\n          return board;\n        }\n    } //If stones were captured\n    else {\n        //Remove the captured stones from the board\n        for (let k = 0; k < capturedOpponents.length; k++) {\n          const capturedPos = capturedOpponents[k];\n          const capturedRow = capturedPos[0];\n          const capturedCol = capturedPos[1];\n          board[capturedRow][capturedCol] = \"n\";\n        }\n\n        return board;\n      }\n  }\n\n  makeMove(i, j) {\n    let newBoard = this.runMoveProcedure(this.state.board.slice(), i, j);\n    let newErrorMessage = '';\n    let newPlayerTurnStatus = '';\n    let nextPlayer = ''; //The move was not successful\n\n    if (newBoard === -1) {\n      newErrorMessage = \"Invalid Move!\";\n      newBoard = this.state.board;\n    } //The move was successful\n    else {\n        nextPlayer = this.state.currentPlayer === 'b' ? 'w' : 'b';\n        newPlayerTurnStatus = nextPlayer === 'b' ? \"Black's Turn!\" : \"White's Turn!\";\n      }\n\n    this.setState({\n      board: newBoard,\n      currentPlayer: nextPlayer,\n      playerTurnStatus: newPlayerTurnStatus,\n      errorMessage: newErrorMessage\n    });\n  }\n\n  isValidMove(row, col) {\n    if (this.state.board[row][col] !== \"n\") {\n      return false;\n    }\n\n    return true;\n  }\n\n  handleClick(i, j) {\n    if (this.isValidMove(i, j)) {\n      this.makeMove(i, j);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-board\",\n        children: /*#__PURE__*/_jsxDEV(Board, {\n          board: this.state.board,\n          boardSize: this.state.boardSize,\n          onClick: (i, j) => this.handleClick(i, j)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: this.state.playerTurnStatus\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: this.state.errorMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Game\",\n      children: /*#__PURE__*/_jsxDEV(Game, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 254,\n    columnNumber: 5\n  }, this);\n}\n\n_c2 = App;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Tile\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["/Users/dylankriegman/Desktop/Go-Web-App-V2/go-game-frontend/src/App.js"],"names":["number","React","Tile","props","onClick","stoneRadius","stoneFill","Board","Component","renderTile","row","col","board","render","boardSize","boardRow","push","Game","constructor","Array","state","currentPlayer","playerTurnStatus","errorMessage","isValidPos","captureHelper","checkedNeighbors","color","directions","numOfLiberties","neighbors","strRowCol","toString","i","length","direction","adjRow","adjCol","adjValue","strAdjPos","includes","neighbor","parsedNeighborPos","split","neighborRow","parseInt","neighborCol","captureCheck","getCapturedOpponents","capturedOpponents","j","opponentColor","hasLiberties","isEmpty","numberOfLiberties","append","runMoveProcedure","console","log","numLiberties","k","capturedPos","capturedRow","capturedCol","makeMove","newBoard","slice","newErrorMessage","newPlayerTurnStatus","nextPlayer","setState","isValidMove","handleClick","App"],"mappings":"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","sourcesContent":["import { number } from 'prop-types';\nimport React from 'react';\n\nfunction Tile(props) {\n    return (\n      <button className=\"tile\" onClick={props.onClick}>\n        <svg height=\"34\" width=\"34\">\n        <circle cx=\"17\" cy=\"17\" r={props.stoneRadius} stroke=\"black\" strokeWidth=\"1\" fill={props.stoneFill} />\n        </svg>\n\n      </button>\n    );\n}\n\n\nclass Board extends React.Component {\n  renderTile(row,col) {\n    return (\n      <Tile \n      onClick={()=>this.props.onClick(row,col)}\n      stoneRadius={this.props.board[row][col]!=='n' ? 14:0}\n      stoneFill={this.props.board[row][col]==='b' ? 'black':'white'}\n      />\n    );\n\n  }\n  render() {\n    const board=[];\n    for(let row=0;row<this.props.boardSize;row++) {\n      const boardRow=[];\n      for(let col=0;col<this.props.boardSize;col++) {\n        boardRow.push(this.renderTile(row,col));\n      }\n      board.push(<div className=\"board-row\">{boardRow}</div>)\n    }\n    return (\n      <div>\n        {board}\n      </div>\n    );\n  }\n}\n\n//Handles Game Logic\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.boardSize=9;\n\n    let Board=new Array(this.boardSize);\n    for(let row=0;row<this.boardSize;row++) {\n      Board[row]=new Array(this.boardSize);\n    }\n    for(let row=0;row<this.boardSize;row++) {\n      for(let col=0;col<this.boardSize;col++) {\n        Board[row][col]='n';\n      }\n    }\n    this.state={\n      currentPlayer:'b',\n      board:Board,\n      boardSize:this.boardSize,\n      playerTurnStatus:\"Black's Turn!\",\n      errorMessage:\"\"\n    };\n  }\n\n\n  isValidPos(row,col) {\n    if(row>=0 && row<this.boardSize) {\n      if(col>=0 && col<this.boardSize) {\n        return true;\n      }\n    }\n    return false;\n  }\n  \n  //returns the number of liberties that a stone or group of connected stones has\n  //expects the row and col of the stone or a row col in the group  as input\n  captureHelper(board,row,col,checkedNeighbors) {\n    const color=board[row][col]\n    const directions=[[-1,0],[1,0],[0,1],[0,-1]];\n    let numOfLiberties=0;\n    let neighbors=[];\n    let strRowCol=(row.toString())+\".\"+(col.toString());\n    for(let i=0;i<directions.length;i++) {\n      let direction=directions[i];\n      let adjRow=row+direction[0];\n      let adjCol=col+direction[1];\n      if(this.isValidPos(adjRow,adjCol)) {\n        let adjValue=board[adjRow][adjCol];\n        let strAdjPos=(adjRow.toString())+\".\"+(adjCol.toString());\n        if(adjValue==='n') {\n          numOfLiberties+=1;\n        }\n        //removed else if(adjValue===opponentColor\n        else if(adjValue===color &&  !checkedNeighbors.includes(strAdjPos)) {\n          neighbors.push(strAdjPos);\n        }\n      }\n    }\n\n    if(numOfLiberties===0 && neighbors.length!==0) {\n      checkedNeighbors.push(strRowCol);\n      for(let i=0;i<neighbors.length;i++) {\n        let neighbor=neighbors[i];\n        let parsedNeighborPos=neighbor.split(\".\");\n        let neighborRow=parseInt(parsedNeighborPos[0]);\n        let neighborCol=parseInt(parsedNeighborPos[1]);\n        numOfLiberties+=this.captureCheck(board,neighborRow,neighborCol,checkedNeighbors);\n      }\n      return numOfLiberties;\n    }\n    else if (numOfLiberties===0 && neighbors.length===0) {\n      return 0;\n    }\n    else {\n      return numOfLiberties;\n    }\n  }\n\n  \n  //Iterates through the board and checks if any of the opponents stones\n  //have been captured\n  //Returns a list of coordinates of captured stones\n  getCapturedOpponents(board) {\n    let capturedOpponents=[]\n    for(let i=0;i<this.state.boardSize;i++) {\n      for(let j=0;j<this.state.boardSize;j++) {\n        const opponentColor=this.state.currentPlayer==='b' ? 'w':'b';\n        const hasLiberties=this.captureHelper(board,i,j,[])===0;\n        const isEmpty=board[i][j]==='n';\n        if(!isEmpty && board[i][j]===opponentColor) {\n          const numberOfLiberties=this.captureHelper(board,i,j,[]);\n          if(numberOfLiberties===0) {\n            capturedOpponents.append([i,j])\n          }\n        }\n      }\n    }\n    return capturedOpponents;\n  }\n\n\n\n\n  //run move procedure\n  runMoveProcedure(board,i,j) {\n    //places the current players stone at (i,j)\n    board[i][j]=this.state.currentPlayer;\n\n    //checks if any stones were captured\n    const capturedOpponents=this.getCapturedOpponents(board);\n    console.log(capturedOpponents);\n    //if no stones were captured check the following 2 cases\n    if(capturedOpponents.length===0) {\n      //Finding out how many liberties the group at (i,j) has\n      const numLiberties=this.captureHelper(board,i,j,[]);\n\n      //Case 1 (the stone or group placed has liberties)\n      if(numLiberties===0) {\n        //Remove the current player's stone from (i,j)\n        //And display invalid move message\n        board[i][j]='n'\n        return -1;\n      }\n      \n      //Case 2 (the stone or group placed has no liberties)\n      else {\n        return board;\n      }\n    }\n\n    //If stones were captured\n    else {\n      //Remove the captured stones from the board\n      for(let k=0;k<capturedOpponents.length;k++) {\n        const capturedPos=capturedOpponents[k];\n        const capturedRow=capturedPos[0];\n        const capturedCol=capturedPos[1];\n        board[capturedRow][capturedCol]=\"n\"\n      }\n      return board;\n    }\n  }\n\n\n\n  makeMove(i,j) {\n    let newBoard=this.runMoveProcedure(this.state.board.slice(),i,j);\n    let newErrorMessage='';\n    let newPlayerTurnStatus='';\n    let nextPlayer='';\n\n    //The move was not successful\n    if(newBoard===-1) {\n      newErrorMessage=\"Invalid Move!\";\n      newBoard=this.state.board;\n    }\n    //The move was successful\n    else {\n      nextPlayer=(this.state.currentPlayer==='b') ? 'w':'b';\n      newPlayerTurnStatus=(nextPlayer==='b') ? \"Black's Turn!\":\"White's Turn!\";\n    }\n    this.setState({\n      board:newBoard,\n      currentPlayer:nextPlayer,\n      playerTurnStatus:newPlayerTurnStatus,\n      errorMessage:newErrorMessage,\n    });\n    \n  }\n\n  isValidMove(row,col) {\n    if(this.state.board[row][col]!==\"n\") {\n      return false;\n    }\n    return true;\n  }\n\n  handleClick(i,j) {\n    if(this.isValidMove(i,j)) {\n      this.makeMove(i,j);\n    }\n  }\n\n\n  render() {\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n          board={this.state.board}\n          boardSize={this.state.boardSize}\n          onClick={(i,j)=>this.handleClick(i,j)}\n          />\n        </div>\n        <div className=\"game-info\">\n          <h3>\n            {this.state.playerTurnStatus}\n          </h3>\n          <h3>\n            {this.state.errorMessage}\n          </h3>\n        </div>\n      </div>\n    );\n  }\n}\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"Game\">\n        <Game />\n      </div>\n    </div>\n  );\n}\n\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}