{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/dylankriegman/Desktop/Go-Web-App-V2/go-game-frontend/src/App.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React from 'react';\n\nfunction Tile(props) {\n  _s();\n\n  const {\n    width,\n    height\n  } = useWindowSize();\n  const minDim = width < height ? width : height;\n  const tileSize = 0.9 * minDim / 9;\n  const radius = props.stoneRadius > 0 ? tileSize / 3 : 0;\n  const prevRadius = radius === 0 ? tileSize / 3 : 0;\n  const blackRadius = props.currentPlayer === 'b' ? prevRadius : 0;\n  const whiteRadius = props.currentPlayer === 'w' ? prevRadius : 0;\n  return (\n    /*#__PURE__*/\n    //define a on mouse enter event and an on mouse leave event\n    //on mouse enter call a function that modified a value so that \n    //the value holds an svg of the players stone\n    //on mouse exit call a function that modified the value so that it\n    //holds nothing\n    _jsxDEV(\"button\", {\n      className: \"tile\",\n      onClick: props.onClick,\n      onMouseEnter: props.onMouseEnter,\n      onMouseLeave: props.mouseExit,\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        width: tileSize,\n        height: tileSize,\n        children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n          r: radius,\n          cx: tileSize / 2,\n          cy: tileSize / 2,\n          stroke: \"black\",\n          strokeWidth: \"3\",\n          fill: props.stoneFill\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"circle\", {\n          className: \"black-circ\",\n          r: blackRadius,\n          cx: tileSize / 2,\n          cy: tileSize / 2,\n          stroke: \"black\",\n          strokeWidth: \"3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"circle\", {\n          className: \"white-circ\",\n          r: whiteRadius,\n          cx: tileSize / 2,\n          cy: tileSize / 2,\n          stroke: \"black\",\n          strokeWidth: \"3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this)\n  );\n} //store in utils/useWindowSize\n//import useWindowSize from \"../utils/useWindowSize\"\n\n\n_s(Tile, \"C9tvAgjyjOrlWBm7mvz9MdD8OaI=\", false, function () {\n  return [useWindowSize];\n});\n\n_c = Tile;\n\nfunction useWindowSize() {\n  _s2();\n\n  const isUndefined = typeof window == \"undefined\";\n  const [windowSize, setWindowSize] = React.useState({\n    width: isUndefined ? 1200 : window.innerWidth,\n    height: isUndefined ? 800 : window.innerHeight\n  });\n  React.useEffect(() => {\n    window.addEventListener(\"resize\", () => {\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight\n      });\n    });\n    return () => {\n      window.removeEventListener(\"resize\", () => {\n        setWindowSize({\n          width: window.innerWidth,\n          height: window.innerHeight\n        });\n      });\n    };\n  }, []);\n  return windowSize;\n}\n\n_s2(useWindowSize, \"4aRaqnxRmyEz+RcuYp3N1pU+dHk=\");\n\nclass Board extends React.Component {\n  renderTile(row, col) {\n    return /*#__PURE__*/_jsxDEV(Tile, {\n      onClick: () => this.props.onClick(row, col),\n      stoneRadius: this.props.board[row][col] !== 'n' ? 14 : 0,\n      stoneFill: this.props.board[row][col] === 'b' ? 'black' : 'white',\n      currentPlayer: this.props.currentPlayer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this);\n  }\n\n  render() {\n    const board = [];\n\n    for (let row = 0; row < this.props.boardSize; row++) {\n      const boardRow = [];\n\n      for (let col = 0; col < this.props.boardSize; col++) {\n        boardRow.push(this.renderTile(row, col));\n      }\n\n      board.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-row\",\n        children: boardRow\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 18\n      }, this));\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: board\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this);\n  }\n\n} //Handles Game Logic\n\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.boardSize = 9;\n    let Board = new Array(this.boardSize);\n\n    for (let row = 0; row < this.boardSize; row++) {\n      Board[row] = new Array(this.boardSize);\n    }\n\n    for (let row = 0; row < this.boardSize; row++) {\n      for (let col = 0; col < this.boardSize; col++) {\n        Board[row][col] = 'n';\n      }\n    }\n\n    this.state = {\n      player1Captures: 0,\n      player2Captures: 0,\n      currentPlayer: 'b',\n      board: Board,\n      boardSize: this.boardSize,\n      playerTurnStatus: \"Black's Turn!\",\n      errorMessage: \"\",\n      player1Name: 'Player 1',\n      player2Name: 'Player 2',\n      player1Color: 'b',\n      player2Color: 'w',\n      prevCapture: [-1, -1]\n    };\n    this.handlePass = this.handlePass.bind(this);\n    this.handleResign = this.handleResign.bind(this);\n  }\n\n  isValidPos(row, col) {\n    if (row >= 0 && row < this.boardSize) {\n      if (col >= 0 && col < this.boardSize) {\n        return true;\n      }\n    }\n\n    return false;\n  } //returns the number of liberties that a stone or group of connected stones has\n  //expects the row and col of the stone or a row col in the group as input\n\n\n  captureHelper(board, row, col, checkedNeighbors) {\n    console.log(typeof checkedNeighbors);\n    const playerColor = board[row][col];\n    const directions = [[-1, 0], [1, 0], [0, 1], [0, -1]];\n    let numOfLiberties = 0;\n    let neighbors = [];\n    const strRowCol = row.toString() + \".\" + col.toString();\n\n    for (let i = 0; i < directions.length; i++) {\n      const direction = directions[i];\n      const adjRow = row + direction[0];\n      const adjCol = col + direction[1];\n\n      if (this.isValidPos(adjRow, adjCol)) {\n        const adjValue = board[adjRow][adjCol];\n        const strAdjPos = adjRow.toString() + \".\" + adjCol.toString();\n\n        if (adjValue === 'n') {\n          numOfLiberties += 1;\n        } else if (adjValue === playerColor && !checkedNeighbors.has(strAdjPos)) {\n          neighbors.push(strAdjPos);\n        }\n      }\n    }\n\n    if (numOfLiberties === 0 && neighbors.length !== 0) {\n      checkedNeighbors.add(strRowCol);\n\n      for (let i = 0; i < neighbors.length; i++) {\n        const neighbor = neighbors[i];\n        const parsedNeighborPos = neighbor.split(\".\");\n        const neighborRow = parseInt(parsedNeighborPos[0]);\n        const neighborCol = parseInt(parsedNeighborPos[1]);\n        numOfLiberties += this.captureHelper(board, neighborRow, neighborCol, checkedNeighbors);\n      }\n\n      return numOfLiberties;\n    } else if (numOfLiberties === 0 && neighbors.length === 0) {\n      return 0;\n    } else {\n      return numOfLiberties;\n    }\n  } //Iterates through the board and checks if any of the opponents stones\n  //have been captured\n  //Returns a list of coordinates of captured stones\n\n\n  getCapturedOpponents(board) {\n    let capturedOpponents = [];\n    const opponentColor = this.state.currentPlayer === 'b' ? 'w' : 'b';\n\n    for (let i = 0; i < this.state.boardSize; i++) {\n      for (let j = 0; j < this.state.boardSize; j++) {\n        const isEmpty = board[i][j] === 'n';\n\n        if (!isEmpty && board[i][j] === opponentColor) {\n          const numberOfLiberties = this.captureHelper(board, i, j, new Set());\n\n          if (numberOfLiberties === 0) {\n            capturedOpponents.push([i, j]);\n          }\n        }\n      }\n    }\n\n    return capturedOpponents;\n  } //run move procedure\n  //returns error and new board\n\n\n  runMoveProcedure(board, i, j) {\n    let errorMessage = \"\";\n    let numCaptures = 0; //if the tile is occupied\n\n    if (board[i][j] !== 'n') {\n      errorMessage = 'Invalid Move!';\n      return [board, numCaptures, errorMessage];\n    } //if it would be a ko move\n    //places the current players stone at (i,j)\n\n\n    board[i][j] = this.state.currentPlayer; //checks if any stones were captured\n\n    const capturedOpponents = this.getCapturedOpponents(board); //if no stones were captured check the following 2 cases\n\n    if (capturedOpponents.length === 0) {\n      //Finding out how many liberties the group at (i,j) has\n      const numLiberties = this.captureHelper(board, i, j, new Set()); //Case 1 (the stone or group placed has no liberties)\n\n      if (numLiberties === 0) {\n        //Remove the current player's stone from (i,j)\n        //And display invalid move message\n        //should return error message of some kind\n        board[i][j] = 'n';\n        errorMessage = \"Invalid Move!\";\n        numCaptures = 0;\n        return [board, numCaptures, errorMessage];\n      } //Case 2 (the stone or group placed has liberties)\n      else {\n          numCaptures = 0;\n          return [board, numCaptures, errorMessage];\n        }\n    } //If stones were captured\n    else {\n        numCaptures = capturedOpponents.length; //Remove the captured stones from the board\n\n        for (let k = 0; k < capturedOpponents.length; k++) {\n          const capturedPos = capturedOpponents[k];\n          const capturedRow = capturedPos[0];\n          const capturedCol = capturedPos[1];\n          board[capturedRow][capturedCol] = \"n\";\n        }\n\n        return [board, numCaptures, errorMessage];\n      }\n  }\n\n  makeMove(i, j) {\n    const moveOutput = this.runMoveProcedure(this.state.board.slice(), i, j);\n    const newBoard = moveOutput[0];\n    const numStonesCaptured = moveOutput[1];\n    const newErrorMessage = moveOutput[2];\n    let newPlayer1Captures = this.state.player1Captures;\n    let newPlayer2Captures = this.state.player2Captures;\n    let newPlayerTurnStatus = this.state.playerTurnStatus;\n    let nextPlayer = this.state.currentPlayer; //The move was successful\n\n    if (newErrorMessage === '') {\n      nextPlayer = this.state.currentPlayer === 'b' ? 'w' : 'b';\n      newPlayerTurnStatus = nextPlayer === 'b' ? \"Black's Turn!\" : \"White's Turn!\";\n    } //If stones were captured\n\n\n    if (numStonesCaptured !== 0) {\n      if (this.state.currentPlayer === this.state.player1Color) {\n        newPlayer1Captures += numStonesCaptured;\n      } else {\n        newPlayer2Captures += numStonesCaptured;\n      }\n    }\n\n    this.setState({\n      board: newBoard,\n      currentPlayer: nextPlayer,\n      playerTurnStatus: newPlayerTurnStatus,\n      errorMessage: newErrorMessage,\n      player1Captures: newPlayer1Captures,\n      player2Captures: newPlayer2Captures\n    });\n  }\n\n  handleClick(i, j) {\n    this.makeMove(i, j);\n  }\n\n  handlePass() {\n    const nextPlayer = this.state.currentPlayer === 'b' ? 'w' : 'b';\n    const newPlayerTurnStatus = nextPlayer === 'b' ? \"Black's Turn!\" : \"White's Turn!\";\n    this.setState({\n      currentPlayer: nextPlayer,\n      playerTurnStatus: newPlayerTurnStatus\n    }); //Change player to next player \n    //If the next player passes then game scoring begins\n  }\n\n  handleResign() {\n    let newErrorMessage = \"\";\n\n    if (this.state.currentPlayer === 'b') {\n      newErrorMessage = \"White wins by resignation!\";\n    } else {\n      newErrorMessage = \"Black wins by resignation!\";\n    }\n\n    this.setState({\n      errorMessage: newErrorMessage\n    });\n  }\n\n  renderGameInfo() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"player1-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Player 1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 11\n        }, this), this.state.player1Captures, \" captures\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"player2-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Player 2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 11\n        }, this), this.state.player2Captures, \" captures\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"turn-info\",\n        children: [this.state.playerTurnStatus, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 11\n        }, this), this.state.errorMessage]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pass-resign-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"pass-button\",\n          onClick: this.handlePass,\n          children: \"Pass\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"resign-button\",\n          onClick: this.handleResign,\n          children: \"Resign\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 7\n    }, this);\n  }\n\n  renderCoord(i) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"coords-box\",\n      children: i\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 7\n    }, this);\n  }\n\n  renderCoords() {\n    const boardSize = 10;\n    let outCoords = [];\n\n    for (let i = 0; i < boardSize; i++) {\n      outCoords.push(this.renderCoord(i));\n    }\n\n    console.log(outCoords.length);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"vertical-coords-container\",\n      children: outCoords\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 381,\n      columnNumber: 7\n    }, this);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: [this.renderCoords(), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-board\",\n        children: /*#__PURE__*/_jsxDEV(Board, {\n          board: this.state.board,\n          boardSize: this.state.boardSize,\n          onClick: (i, j) => this.handleClick(i, j),\n          currentPlayer: this.state.currentPlayer\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 394,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 393,\n        columnNumber: 9\n      }, this), this.renderGameInfo()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 391,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Game\",\n      children: /*#__PURE__*/_jsxDEV(Game, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 413,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 412,\n    columnNumber: 5\n  }, this);\n}\n\n_c2 = App;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Tile\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["/Users/dylankriegman/Desktop/Go-Web-App-V2/go-game-frontend/src/App.js"],"names":["React","Tile","props","width","height","useWindowSize","minDim","tileSize","radius","stoneRadius","prevRadius","blackRadius","currentPlayer","whiteRadius","onClick","onMouseEnter","mouseExit","stoneFill","isUndefined","window","windowSize","setWindowSize","useState","innerWidth","innerHeight","useEffect","addEventListener","removeEventListener","Board","Component","renderTile","row","col","board","render","boardSize","boardRow","push","Game","constructor","Array","state","player1Captures","player2Captures","playerTurnStatus","errorMessage","player1Name","player2Name","player1Color","player2Color","prevCapture","handlePass","bind","handleResign","isValidPos","captureHelper","checkedNeighbors","console","log","playerColor","directions","numOfLiberties","neighbors","strRowCol","toString","i","length","direction","adjRow","adjCol","adjValue","strAdjPos","has","add","neighbor","parsedNeighborPos","split","neighborRow","parseInt","neighborCol","getCapturedOpponents","capturedOpponents","opponentColor","j","isEmpty","numberOfLiberties","Set","runMoveProcedure","numCaptures","numLiberties","k","capturedPos","capturedRow","capturedCol","makeMove","moveOutput","slice","newBoard","numStonesCaptured","newErrorMessage","newPlayer1Captures","newPlayer2Captures","newPlayerTurnStatus","nextPlayer","setState","handleClick","renderGameInfo","renderCoord","renderCoords","outCoords","App"],"mappings":"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","sourcesContent":["import React from 'react';\n\nfunction Tile(props)  {\n    const {width,height}=useWindowSize();\n    const minDim=width<height ? width:height;\n    const tileSize=((0.9*minDim)/9)\n    const radius=(props.stoneRadius>0 ? ((tileSize/3)):0);\n    const prevRadius=radius===0 ? (tileSize/3):0;\n    const blackRadius=(props.currentPlayer==='b') ? prevRadius:0;\n    const whiteRadius=(props.currentPlayer==='w') ? prevRadius:0;\n    return (\n      //define a on mouse enter event and an on mouse leave event\n      //on mouse enter call a function that modified a value so that \n      //the value holds an svg of the players stone\n      //on mouse exit call a function that modified the value so that it\n      //holds nothing\n      <button className=\"tile\" onClick={props.onClick} onMouseEnter={props.onMouseEnter} onMouseLeave={props.mouseExit}>\n        <svg width={tileSize} height={tileSize}>\n          <circle  r={radius} cx={tileSize/2} cy={tileSize/2} stroke=\"black\" strokeWidth=\"3\" fill={props.stoneFill} />\n          \n          <circle className=\"black-circ\" r={blackRadius} cx={tileSize/2} cy={tileSize/2} stroke=\"black\" strokeWidth=\"3\" />\n          <circle className=\"white-circ\" r={whiteRadius} cx={tileSize/2} cy={tileSize/2} stroke=\"black\" strokeWidth=\"3\" />\n          \n        \n        </svg>\n        \n\n        \n\n      </button>\n      );\n      \n}\n\n\n//store in utils/useWindowSize\n//import useWindowSize from \"../utils/useWindowSize\"\nfunction useWindowSize() {\n  const isUndefined=typeof(window)==\"undefined\";\n  const [windowSize,setWindowSize]=React.useState({\n    width: isUndefined ? 1200:window.innerWidth,\n    height:isUndefined ? 800:window.innerHeight,\n  });\n\n  React.useEffect(()=> {\n    window.addEventListener(\"resize\",()=> {\n      setWindowSize({width:window.innerWidth,height:window.innerHeight});\n    });\n    return () => {\n      window.removeEventListener(\"resize\",() => {\n        setWindowSize({width:window.innerWidth,height:window.innerHeight});\n      });\n    };\n  },[]);\n  return windowSize;\n}\n\n\n\nclass Board extends React.Component {\n  renderTile(row,col) {\n    return (\n      <Tile\n      onClick={()=>this.props.onClick(row,col)}\n      stoneRadius={this.props.board[row][col]!=='n' ? 14:0}\n      stoneFill={this.props.board[row][col]==='b' ? 'black':'white'}\n      currentPlayer={this.props.currentPlayer}\n      />\n    );\n  }\n  render() {\n    const board=[];\n    for(let row=0;row<this.props.boardSize;row++) {\n      const boardRow=[];\n      for(let col=0;col<this.props.boardSize;col++) {\n        boardRow.push(this.renderTile(row,col));\n      }\n      board.push(<div className=\"board-row\">{boardRow}</div>)\n    }\n    return (\n      <div>\n        {board}\n      </div>\n    );\n  }\n}\n\n//Handles Game Logic\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.boardSize=9;\n\n    let Board=new Array(this.boardSize);\n    for(let row=0;row<this.boardSize;row++) {\n      Board[row]=new Array(this.boardSize);\n    }\n    for(let row=0;row<this.boardSize;row++) {\n      for(let col=0;col<this.boardSize;col++) {\n        Board[row][col]='n';\n      }\n    }\n    this.state={\n      player1Captures:0,\n      player2Captures:0,\n      currentPlayer:'b',\n      board:Board,\n      boardSize:this.boardSize,\n      playerTurnStatus:\"Black's Turn!\",\n      errorMessage:\"\",\n      player1Name:'Player 1',\n      player2Name:'Player 2',\n      player1Color:'b',\n      player2Color:'w',\n      prevCapture:[-1,-1],\n    };\n\n    this.handlePass=this.handlePass.bind(this);\n    this.handleResign=this.handleResign.bind(this);\n\n\n  }\n\n\n  isValidPos(row,col) {\n    if(row>=0 && row<this.boardSize) {\n      if(col>=0 && col<this.boardSize) {\n        return true;\n      }\n    }\n    return false;\n  }\n  \n  //returns the number of liberties that a stone or group of connected stones has\n  //expects the row and col of the stone or a row col in the group as input\n  captureHelper(board,row,col,checkedNeighbors) {\n    console.log(typeof(checkedNeighbors));\n    const playerColor=board[row][col]\n    const directions=[[-1,0],[1,0],[0,1],[0,-1]];\n    let numOfLiberties=0;\n    let neighbors=[];\n    const strRowCol=(row.toString())+\".\"+(col.toString());\n    for(let i=0;i<directions.length;i++) {\n      const direction=directions[i];\n      const adjRow=row+direction[0];\n      const adjCol=col+direction[1];\n      \n      if(this.isValidPos(adjRow,adjCol)) {\n        const adjValue=board[adjRow][adjCol];\n        const strAdjPos=(adjRow.toString())+\".\"+(adjCol.toString());\n        if(adjValue==='n') {\n          numOfLiberties+=1;\n        }\n        else if(adjValue===playerColor &&  !checkedNeighbors.has(strAdjPos)) {\n          neighbors.push(strAdjPos);\n        }\n      }\n    }\n\n    if(numOfLiberties===0 && neighbors.length!==0) {\n      checkedNeighbors.add(strRowCol);\n      for(let i=0;i<neighbors.length;i++) {\n        const neighbor=neighbors[i];\n        const parsedNeighborPos=neighbor.split(\".\");\n        const neighborRow=parseInt(parsedNeighborPos[0]);\n        const neighborCol=parseInt(parsedNeighborPos[1]);\n        numOfLiberties+=this.captureHelper(board,neighborRow,neighborCol,checkedNeighbors);\n      }\n      return numOfLiberties;\n    }\n    else if (numOfLiberties===0 && neighbors.length===0) {\n      return 0;\n    }\n    else {\n      return numOfLiberties;\n    }\n  }\n\n  //Iterates through the board and checks if any of the opponents stones\n  //have been captured\n  //Returns a list of coordinates of captured stones\n  getCapturedOpponents(board) {\n    let capturedOpponents=[]\n    const opponentColor=this.state.currentPlayer==='b' ? 'w':'b';\n    for(let i=0;i<this.state.boardSize;i++) {\n      for(let j=0;j<this.state.boardSize;j++) {\n        const isEmpty=board[i][j]==='n';\n        if(!isEmpty && board[i][j]===opponentColor) {\n          const numberOfLiberties=this.captureHelper(board,i,j,new Set());\n          if(numberOfLiberties===0) {\n            capturedOpponents.push([i,j]);\n          }\n        }\n      }\n    }\n    return capturedOpponents;\n  }\n\n  //run move procedure\n  //returns error and new board\n  runMoveProcedure(board,i,j) {\n    let errorMessage=\"\";\n    let numCaptures=0;\n\n    //if the tile is occupied\n    if(board[i][j]!=='n') {\n      errorMessage='Invalid Move!';\n      return [board,numCaptures,errorMessage];\n    }\n\n    //if it would be a ko move\n\n    //places the current players stone at (i,j)\n    board[i][j]=this.state.currentPlayer;\n    \n\n    //checks if any stones were captured\n    const capturedOpponents=this.getCapturedOpponents(board);\n    //if no stones were captured check the following 2 cases\n    if(capturedOpponents.length===0) {\n      //Finding out how many liberties the group at (i,j) has\n\n      const numLiberties=this.captureHelper(board,i,j,new Set());\n\n      //Case 1 (the stone or group placed has no liberties)\n      if(numLiberties===0) {\n        //Remove the current player's stone from (i,j)\n        //And display invalid move message\n        //should return error message of some kind\n        board[i][j]='n'\n        errorMessage=\"Invalid Move!\"\n        numCaptures=0;\n        return [board,numCaptures,errorMessage];\n      }\n      //Case 2 (the stone or group placed has liberties)\n      else {\n        numCaptures=0;\n        return [board,numCaptures,errorMessage];\n      }\n    }\n\n    //If stones were captured\n    else {\n      numCaptures=capturedOpponents.length;\n      //Remove the captured stones from the board\n      for(let k=0;k<capturedOpponents.length;k++) {\n        const capturedPos=capturedOpponents[k];\n        const capturedRow=capturedPos[0];\n        const capturedCol=capturedPos[1];\n        board[capturedRow][capturedCol]=\"n\"\n      }\n      return [board,numCaptures,errorMessage];\n    }\n  }\n\n\n\n  makeMove(i,j) {\n\n    const moveOutput=this.runMoveProcedure(this.state.board.slice(),i,j);\n    const newBoard=moveOutput[0];\n    const numStonesCaptured=moveOutput[1]\n    const newErrorMessage=moveOutput[2];\n\n    let newPlayer1Captures=this.state.player1Captures\n    let newPlayer2Captures=this.state.player2Captures;\n    let newPlayerTurnStatus=this.state.playerTurnStatus;\n    let nextPlayer=this.state.currentPlayer;\n\n    //The move was successful\n    if(newErrorMessage==='') {\n      nextPlayer=(this.state.currentPlayer==='b') ? 'w':'b';\n      newPlayerTurnStatus=(nextPlayer==='b') ? \"Black's Turn!\":\"White's Turn!\";\n    }\n    //If stones were captured\n    if(numStonesCaptured!==0) {\n      if(this.state.currentPlayer===this.state.player1Color) {\n        newPlayer1Captures+=numStonesCaptured;\n      }\n      else {\n        newPlayer2Captures+=numStonesCaptured\n      }\n    }\n\n    this.setState({\n      board:newBoard,\n      currentPlayer:nextPlayer,\n      playerTurnStatus:newPlayerTurnStatus,\n      errorMessage:newErrorMessage,\n      player1Captures:newPlayer1Captures,\n      player2Captures:newPlayer2Captures\n    });\n    \n  }\n\n\n  handleClick(i,j) {\n    this.makeMove(i,j);\n  }\n\n  \n  handlePass() {\n    const nextPlayer=(this.state.currentPlayer==='b') ? 'w':'b';\n    const newPlayerTurnStatus=(nextPlayer==='b') ? \"Black's Turn!\":\"White's Turn!\";\n    this.setState({\n      currentPlayer:nextPlayer,\n      playerTurnStatus:newPlayerTurnStatus,\n    });\n\n    //Change player to next player \n\n    //If the next player passes then game scoring begins\n\n  }\n\n  handleResign() {\n    let newErrorMessage=\"\";\n    if (this.state.currentPlayer==='b') {\n      newErrorMessage=\"White wins by resignation!\"\n    }\n    else {\n      newErrorMessage=\"Black wins by resignation!\"\n    }\n    this.setState({\n      errorMessage:newErrorMessage,\n    });\n\n  }\n\n  renderGameInfo() {\n    return (\n      <div className=\"game-info\">\n        <div className=\"player1-info\">\n          <h3>\n            Player 1\n          </h3>\n          {this.state.player1Captures} captures\n        </div>\n        <div className=\"player2-info\">\n          <h3>\n            Player 2\n          </h3>\n          {this.state.player2Captures} captures\n        </div>\n        <div className=\"turn-info\">\n          {this.state.playerTurnStatus}\n          <br></br>\n          {this.state.errorMessage}\n        </div>\n        <div className=\"pass-resign-container\">\n          <button className=\"pass-button\" onClick={this.handlePass}>\n            Pass\n          </button>\n          <button className=\"resign-button\" onClick={this.handleResign}>\n            Resign\n          </button>\n        </div>\n      \n      </div>\n\n    );\n\n  }\n\n  renderCoord(i) {\n    return (\n      <div className=\"coords-box\">\n        {i}\n      </div>\n    );\n  } \n\n  renderCoords() {\n    const boardSize=10;\n    let outCoords=[]\n    for(let i=0;i<boardSize;i++) {\n      outCoords.push(this.renderCoord(i));\n    }\n    console.log(outCoords.length)\n    return (\n      <div className=\"vertical-coords-container\">\n        {outCoords}\n      </div>\n    );\n\n  }\n\n  render() {\n\n    return (\n      <div className=\"game\">\n        {this.renderCoords()}\n        <div className=\"game-board\">\n          <Board\n          board={this.state.board}\n          boardSize={this.state.boardSize}\n          onClick={(i,j)=>this.handleClick(i,j)}\n          currentPlayer={this.state.currentPlayer}\n          >\n          </Board>\n        </div>\n        {this.renderGameInfo()}\n      </div>\n    );\n    \n  }\n}\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"Game\">\n        <Game />\n      </div>\n    </div>\n  );\n}\n\n\n\nexport default App;"]},"metadata":{},"sourceType":"module"}