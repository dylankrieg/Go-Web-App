{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/dylankriegman/Desktop/Go-Web-App/go-game-frontend/src/App.js\";\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport React from 'react';\n\nfunction Tile(props) {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"tile\",\n    onClick: props.onClick,\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      height: \"34\",\n      width: \"34\",\n      children: /*#__PURE__*/_jsxDEV(\"circle\", {\n        cx: \"17\",\n        cy: \"17\",\n        r: props.stoneRadius,\n        stroke: \"black\",\n        \"stroke-width\": \"0\",\n        fill: props.stoneFill\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 7\n  }, this);\n}\n\n_c = Tile;\n\nclass Board extends React.Component {\n  renderTile(row, col) {\n    return /*#__PURE__*/_jsxDEV(Tile, {\n      onClick: () => this.props.onClick(row, col),\n      stoneRadius: this.props.filledPositions[row][col] != 'n' ? 14 : 0,\n      stoneFill: this.props.filledPositions[row][col] == 'b' ? 'black' : 'white'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this);\n  }\n\n  render() {\n    const board = [];\n\n    for (let row = 0; row < 9; row++) {\n      const boardRow = [];\n\n      for (let col = 0; col < 9; col++) {\n        boardRow.push(this.renderTile(row, col));\n      }\n\n      board.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-row\",\n        children: boardRow\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 18\n      }, this));\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: board\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this);\n  }\n\n} //Handles Game Logic\n\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    let FilledPositions = new Array(9);\n\n    for (let row = 0; row < 9; row++) {\n      FilledPositions[row] = new Array(9);\n    }\n\n    for (let row = 0; row < 9; row++) {\n      for (let col = 0; col < 9; col++) {\n        FilledPositions[row][col] = \"n\";\n      }\n    }\n\n    this.state = {\n      filledPositions: FilledPositions,\n      playerTurn: 'b',\n      playerTurnStatus: \"Black's Turn!\",\n      errorStatus: \"\"\n    };\n    this.updateVisuals();\n  } //Updates Information Elements\n  //Current Player's Turn\n\n\n  updateVisuals() {\n    let playerTurnMessage = \"\";\n\n    if (this.state.playerTurn === \"b\") {\n      playerTurnMessage = \"Black's Turn!\";\n    } else {\n      playerTurnMessage = \"White's Turn!\";\n    }\n\n    this.setState({\n      playerTurnStatus: \"playerTurnMessage\"\n    });\n  }\n\n  makeMove(i, j) {\n    this.updateVisuals();\n    const newPositions = this.state.filledPositions.slice();\n    newPositions[i][j] = this.state.playerTurn;\n    const newPlayerTurn = this.state.playerTurn === 'b' ? 'w' : 'b';\n    this.setState({\n      filledPositions: newPositions,\n      playerTurn: newPlayerTurn\n    });\n  } //Checks if placing a black,white stone at a position is valid\n\n\n  isValidMove(row, col, player) {\n    //If the move is invalid\n    if (this.state.filledPositions[row][col] !== \"n\") {\n      //Display error message\n      this.setState({\n        status: \"Invalid move! Tile is occupied\"\n      });\n      return false;\n    }\n\n    return true;\n  }\n\n  handleClick(i, j) {\n    if (this.isValidMove(i, j)) {\n      this.makeMove(i, j);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"header\", {\n        children: \"Invalid Move!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-board\",\n        children: /*#__PURE__*/_jsxDEV(Board, {\n          filledPositions: this.state.filledPositions,\n          onClick: (i, j) => this.handleClick(i, j)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-info\",\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: this.state.playerTurnStatus\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Game\",\n      children: /*#__PURE__*/_jsxDEV(Game, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 5\n  }, this);\n}\n\n_c2 = App;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Tile\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["/Users/dylankriegman/Desktop/Go-Web-App/go-game-frontend/src/App.js"],"names":["React","Tile","props","onClick","stoneRadius","stoneFill","Board","Component","renderTile","row","col","filledPositions","render","board","boardRow","push","Game","constructor","FilledPositions","Array","state","playerTurn","playerTurnStatus","errorStatus","updateVisuals","playerTurnMessage","setState","makeMove","i","j","newPositions","slice","newPlayerTurn","isValidMove","player","status","handleClick","App"],"mappings":"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","sourcesContent":["import logo from './logo.svg';\nimport './App.css';\nimport React from 'react';\n\n\nfunction Tile(props) {\n    return (\n      <button className=\"tile\" onClick={props.onClick}>\n        <svg height=\"34\" width=\"34\">\n        <circle cx=\"17\" cy=\"17\" r={props.stoneRadius} stroke=\"black\" stroke-width=\"0\" fill={props.stoneFill} />\n        </svg>\n\n      </button>\n    );\n}\n\n\nclass Board extends React.Component {\n  renderTile(row,col) {\n    return (\n      <Tile \n      onClick={()=>this.props.onClick(row,col)}\n      stoneRadius={this.props.filledPositions[row][col]!='n' ? 14:0}\n      stoneFill={this.props.filledPositions[row][col]=='b' ? 'black':'white'}\n      />\n    );\n\n  }\n  render() {\n    const board=[];\n    for(let row=0;row<9;row++) {\n      const boardRow=[];\n      for(let col=0;col<9;col++) {\n        boardRow.push(this.renderTile(row,col));\n      }\n      board.push(<div className=\"board-row\">{boardRow}</div>)\n    }\n    return (\n      <div>\n        {board}\n      </div>\n    );\n  }\n}\n\n//Handles Game Logic\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    let FilledPositions=new Array(9);\n    for(let row=0;row<9;row++) {\n      FilledPositions[row]=new Array(9);\n    }\n    for(let row=0;row<9;row++) {\n      for(let col=0;col<9;col++) {\n        FilledPositions[row][col]=\"n\";\n      }\n    }\n    this.state={\n      filledPositions:FilledPositions,\n      playerTurn:'b',\n      playerTurnStatus:\"Black's Turn!\",\n      errorStatus:\"\",\n    };\n    this.updateVisuals()\n\n  }\n\n  //Updates Information Elements\n  //Current Player's Turn\n  updateVisuals() {\n    let playerTurnMessage=\"\"\n    if(this.state.playerTurn===\"b\") {\n      playerTurnMessage=\"Black's Turn!\";\n    }\n    else {\n      playerTurnMessage=\"White's Turn!\";\n    }\n    this.setState({\n      playerTurnStatus:\"playerTurnMessage\"\n    });\n\n  }\n\n  \n  makeMove(i,j) {\n    this.updateVisuals()\n    const newPositions=this.state.filledPositions.slice();\n    newPositions[i][j]=this.state.playerTurn;\n    const newPlayerTurn=(this.state.playerTurn==='b') ? 'w':'b';\n    this.setState({\n      filledPositions:newPositions,\n      playerTurn:newPlayerTurn\n    });\n  }\n\n  //Checks if placing a black,white stone at a position is valid\n  isValidMove(row,col,player) {\n    //If the move is invalid\n    if(this.state.filledPositions[row][col]!==\"n\") {\n      //Display error message\n      this.setState({\n        status:\"Invalid move! Tile is occupied\"\n      });\n      return false;\n    }\n    return true\n\n  }\n\n  handleClick(i,j) {\n    if(this.isValidMove(i,j)) {\n      this.makeMove(i,j)\n    }\n    else {\n      return (\n        <header>\n          Invalid Move!\n        </header>\n      );\n    }\n    \n  }\n\n\n  render() {\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n          filledPositions={this.state.filledPositions}\n          onClick={(i,j)=>this.handleClick(i,j)}\n          />\n        </div>\n        <div className=\"game-info\">\n          <h3>\n            {this.state.playerTurnStatus}\n          </h3>\n        </div>\n      </div>\n    );\n  }\n\n\n}\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"Game\">\n        <Game />\n      </div>\n    </div>\n  );\n}\n\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}